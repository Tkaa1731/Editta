@page "/EditLicenses"
@attribute [Authorize]
@inject PobytneService service
@inject IHxMessengerService Messenger
@inject IHxMessageBoxService MessageBox

<PageTitle>EditLicense</PageTitle>
<AuthorizeView>
    <Authorized>

    <div class="row h-100">
        <div class="col-lg-3 mh-100 overflow-hidden">
            <HxTreeView TItem="IDirectory"
                        SelectedItemChanged="OnSelect"
                        Items="@fileSystem"
                        CssClass="p-3 card floating-card h-auto"
                        ItemTitleSelector="@(p => p.Name)"
                        ItemIconSelector="@(p => p.Icon)"
                        ItemInitialExpandedSelector=@(p => p.Name=="Pobytne licence")
                        ItemChildrenSelector="@(p => p.SubDirectories)" />
        </div>
        <div class="col-lg-9 mh-100 overflow-hidden">
            <ListCustom 
                ListTitle="@listTitle" 
                ListItems=@listOfItems 
                selectedItem=selectedItem 
                selectedItemChanged=OnItemSelect 
                EventNewItem="OnNewItem">

                <MenuGridColumn>
                    @if(selectedDirectory is not UserDir){
		                <HxContextMenuGridColumn TItem="IListItem" Context="item">
			                <HxButton Icon="@BootstrapIcon.Trash" style="color:red; padding: 0px;" Color="ThemeColor.Link" Tooltip="Smazat" OnClick="async()=>await DeleteItemClicked(item)"/>
		                </HxContextMenuGridColumn>
                    }
	            </MenuGridColumn>

            </ListCustom>
        </div>
    </div>
		    <FormModal formItem="formItem" @ref=formModal OnSuccessRequest="OnSuccessRequestHandler"></FormModal>
	    </Authorized>
	<NotAuthorized>
		JSTE V NOACCESS MODU PRO  PRISTUP - APLICATION
	</NotAuthorized>
</AuthorizeView>
<style>
    .scrollable-table-container {
		max-height: 80svh;
		overflow: auto;
	}
</style>
@code {
    [CascadingParameter]
    private ModuleWorkplace moduleWorkspace { get; set; } = default!;

    private IDirectory? selectedDirectory;
    private IListItem? selectedItem;
    private IListItem? formItem;
    private List<IListItem>? listOfItems;
    private List<Directory> fileSystem = new();
    private FormModal? formModal;

    private string listTitle
    {
        get
        {
            switch (selectedDirectory)
            {
                case Directory d:
                    return "Počet licencí";
                case LicenseDir l:
                    return "Počet modulů";
                case UserDir u:
                    return "Počet uživatelů";
                case ModuleDir m:
                    return "Počet oprávnění";
                default:
                    return string.Empty;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        moduleWorkspace.Id = -1;
        fileSystem = new List<Directory>() { new Directory(service, "Pobytné licence") };
        await fileSystem[0].OnSelect();
    }
    private async Task OnSelect(IDirectory e)
    {
        this.selectedDirectory = e;
        if (selectedDirectory is not null)
        {
            await selectedDirectory.OnSelect();
            listOfItems = selectedDirectory.ItemsList;            
        }
    }
    private async Task OnItemSelect(IListItem i)
    {
        if(i is not null && formModal is not null)
        {
            formItem = (IListItem)i.Clone();
            await formModal.UpdateForm();            
        }
        selectedItem = null;
    }
    private async Task OnNewItem()
    {
        if(selectedDirectory is not null && formModal is not null)
        {
            formItem = selectedDirectory.GetNew();
            await formModal.InsertForm();            
        }
    }
    private async Task OnSuccessRequestHandler((IListItem,EForm) item)
    {
        switch (item.Item2)
        {
            case EForm.Insert:
                selectedDirectory?.Insert(item.Item1);
                break;
            case EForm.Update:
                selectedDirectory?.Update(item.Item1);
                break;
        }

        await OnSelect(selectedDirectory!); // Update ListCustom          

        StateHasChanged();// Update TreeView
    }
    private async Task DeleteItemClicked(IListItem deleteItem)
    {
        var deleteMessage = await MessageBox.ShowAsync("Smazat položku",$"Opravdu chcete smazat položku: {deleteItem.Name}", MessageBoxButtons.YesNo);
        if (deleteMessage == MessageBoxButtons.No)
            return;

        object? response;
        switch (deleteItem)
        {
            case License l:
                response = await service.DeleteAsync<License>(l.Id, moduleWorkspace.Id);
                break;
            case Module m:
                response = await service.DeleteAsync<Module>(m.Id, moduleWorkspace.Id);
                break;
            case Permition p:
                response = await service.DeleteAsync<Permition>(p.Id, moduleWorkspace.Id);
                break;
            default:
                return;
        }
        if(response is ErrorResponse error)
            Messenger.AddError(title: "Chyba při smazáni", message: error.ErrorMessage );
        else
        {
            selectedDirectory!.Delete(deleteItem);
            await OnSelect(selectedDirectory!);// Update ListCustom   
            StateHasChanged();//Update TreeView

            Messenger.AddInformation(title: "Vše v pořádku", message: "Záznam byl úspěšně smazán.");
            await Task.Delay(1500);
            Messenger.Clear();
        }
    }
    //TODO: Opraveneni k editu licenci
}