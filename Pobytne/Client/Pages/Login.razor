@page "/login"
@inject HttpClient httpClient
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProv
@inject NavigationManager navManager


<section class="vh-100" style="background-color: rgba(255,255,255,0.8);">
	<div class="container py-5 h-100">
		<div class="row d-flex justify-content-center align-items-center h-100">
			<div class="col-12 col-md-8 col-lg-6 col-xl-5">
				<div class="card shadow-2-strong" style="border-radius: 1rem;">
					<div class="card-body p-5 text-center">

						<h3 class="mb-5">Sign in</h3>
                        <form>
                            <!-- Email input -->
                            <div class="form-outline mb-4">
                              <input type="text" id="form2Example1" class="form-control" @bind="logRequest.Name"/>
                              <label class="form-label" for="form2Example1">Login name</label>
                            </div>
                            
                            <!-- Password input -->
                            <div class="form-outline mb-4">
                              <input type="password" id="form2Example2" class="form-control" @bind="logRequest.Password" />
                              <label class="form-label" for="form2Example2">Password</label>
                            </div>
                            
                            <!-- Submit button -->
                            <button type="button" class="btn btn-primary btn-block btn-lg" @onclick="Authenticate">Login</button>
                            
						</form>
					</div>
				</div>
			</div>
		</div>
	</div>
</section>



@code {
    private LoginRequest logRequest = new();
    private async Task Authenticate()
    {
        //try
        //{
        //    await AuthenticationService.Login(logRequest);
        //    navManager.NavigateTo("/", true);
        //}
        //catch(Exception ex)
        //{
        //    await js.InvokeVoidAsync("alert", ex.Message);
        //    return;
        //}
        var logResponse = await httpClient.PostAsJsonAsync<LoginRequest>("/api/User/Login",logRequest);
        if (logResponse.IsSuccessStatusCode)
        {
            var user = await logResponse.Content.ReadFromJsonAsync<UserAccount>();
            var customAuthStateProvider =(CustomAuthenticationStateProvider) authStateProv;
            await customAuthStateProvider.UpdateAuthenticationState(user);
            await js.InvokeVoidAsync("alert", user.ToString());
            navManager.NavigateTo("/", true);
        }
        else if(logResponse.StatusCode == HttpStatusCode.Unauthorized)
        {
            await js.InvokeVoidAsync("alert", "invalid Username or Password");
            return;
        }
    }

}
