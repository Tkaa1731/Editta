@page "/{idModule}/CashRegisterReports"
@attribute [Authorize]
@inject PobytneService _service
@inject IHxMessengerService Messenger
@inject ExcelExportService _csvService

<ModuleNav idModule="@idModule" PageTitle="Souhrny pokladna"></ModuleNav>

<AuthorizeView Policy="PermitionPolicy" Resource=(EPermition.EvidenceSummary,EAccess.ReadOnly,idModule)>
    <Authorized>
		<div class="row h-100">
			<div class="col mh-100 overflow-hidden">

				<HxListLayout TFilterModel="HxListLayout.NoFilter" CssClass="floating-card">
					<TitleTemplate>
						Počet záznamů pokladny <HxBadge Color="ThemeColor.Light" TextColor="ThemeColor.Dark" CssClass="ms-1 fs-6">@reportsCount</HxBadge>
					</TitleTemplate>
					<DataTemplate>
						<HxGrid @ref="grid" 
								TItem="CashRegister"
								DataProvider="GetGridData"
								Responsive="true"
								SelectionEnabled="false"
								ContentNavigationMode="GridContentNavigationMode.Pagination"
								HeaderRowCssClass="sticky-top"
								PageSize="18"
								ItemRowHeight="20"
								>
							<Columns>
								@if (ShowGroups)
								{
									<HxGridColumn HeaderText="Id" ItemTextSelector="cash => cash.Id.ToString()" />
									<HxGridColumn HeaderText="Název" ItemTextSelector="cash => cash.RecordName" SortKeySelector="cash => cash.RecordName"/>
									<HxGridColumn HeaderText="Částka" ItemTextSelector="cash => cash.Price.ToString()" SortKeySelector="cash=>cash.Price"/>						
									<HxGridColumn HeaderText="ÚčetA" ItemTextSelector="cash => cash.AccountA.ToString()" SortKeySelector="cash=>cash.AccountA"/>						
									<HxGridColumn HeaderText="ÚčetS" ItemTextSelector="cash => cash.AccountS.ToString()" SortKeySelector="cash=>cash.AccountS"/>						
								}
								else
								{							
									<HxGridColumn HeaderText="Id" ItemTextSelector="cash => cash.Id.ToString()" />
									<HxGridColumn HeaderText="Datum" ItemTextSelector="cash => cash.InteractionDate.ToShortDateString()" SortKeySelector="cash => cash.InteractionDate" />
									<HxGridColumn HeaderText="Název položky" ItemTextSelector="cash => cash.RecordName" SortKeySelector="cash => cash.RecordName"/>
									<HxGridColumn HeaderText="Popis" ItemTextSelector="cash => cash.InteractionDescription" />
									<HxGridColumn HeaderText="Částka" ItemTextSelector="cash => cash.Price.ToString()" SortKeySelector="cash=>cash.Price"/>
									<HxGridColumn HeaderText="Uživatel" ItemTextSelector="cash => cash.CustomerName" SortKeySelector="cash => cash.CustomerName"/>
									<HxGridColumn HeaderText="Změnil" ItemTextSelector="cash => cash.CreationUserName" SortKeySelector="cash => cash.CreationUserName"/>
									<HxGridColumn HeaderText="Změněno" ItemTextSelector="cash => cash.CreationDate.ToString()" SortKeySelector="cash => cash.CreationDate"/>
								}
							</Columns>
						</HxGrid>
					</DataTemplate>
				</HxListLayout>
			</div>
			<div class="col-4 d-flex flex-column overflow-hidden h-max" style="max-width:500px;">
				<div class="p-3 mb-3 card floating-card">
					@* Porovnani k pokladne *@
					<h2>@reportsList.Sum(r => r.Price) Kč</h2>
				</div>
				<ReportFilter 
					Filter="filter" 
					OnFilterSubmit="ApplyFilter"
					OnExcelTransmit="async()=>await _csvService.ExportData(reportsList)"
					OnGroupBySubmit="async()=>{ShowGroups = true;await grid.RefreshDataAsync();}"
					ExcelEnable="@(reportsList.Count > 0)"
				>
					<FilterTemplate>
						@* Payment Filter *@
						<div>

							<HxSelect TItem="RKeyValue"
									  TValue="int"
									  Label="Platba"
									  Data="paymentList"
									  @bind-Value="filter.PaymentId"
									  Nullable="false"
									  TextSelector="@(p => p.Name)"
									  ValueSelector="@(p => p.Id)"
									  Enabled="filter.PaymentId > 0"
									  />

							<div class="w-100 pt-1"/>
							@*Client Filter *@
							<HxInputText Label="Uzivatel" Enabled="false" CssClass="col" InputCssClass="bg-white border-end-0" @bind-Value="clientName">
									<InputGroupEndTemplate>
										@if (selectedClient is not null)
										{
											<HxButton Icon="@BootstrapIcon.XLg" Color="ThemeColor.Link" OnClick="()=>selectedClient = null" CssClass="border-top border-bottom text-danger" />
										}
										<HxButton Text="" Color="ThemeColor.Primary" Outline="true" Icon="BootstrapIcon.Search" OnClick="async()=>await clientsModal.ShowAsync()" />
									</InputGroupEndTemplate>
							</HxInputText>
						</div>

					</FilterTemplate>
					<GroupByTemplate>

						<HxRadioButtonList Label="Souhrny podle:"
						   TItem="RKeyValue"
						   TValue="int"
						   Data="@radioList"
						   @bind-Value="@selectedRadio"
						   ItemTextSelector="@(r => r.Name)"
						   ItemValueSelector="@(r => r.Id)" />

					</GroupByTemplate>
				</ReportFilter>


			</div>
		</div>
	</Authorized>
</AuthorizeView>


<HxModal @ref="clientsModal" Centered=true Backdrop="ModalBackdrop.Static" Size="ModalSize.Large">
	<BodyTemplate>
		<ClientList Editable="false" @bind-Value="selectedClient"/>
	</BodyTemplate>
	<FooterTemplate>
		<HxButton Text="Potvrdit" OnClick="async()=>await clientsModal.HideAsync()" Color="ThemeColor.Primary" CssClass="w-100" />
	</FooterTemplate>
</HxModal>
@code {
	[EditorRequired]
	[Parameter]
	public string idModule { get; set; } = "-1";
	[CascadingParameter]
	private ModuleWorkplace moduleWorkspace { get; set; } = default!;
	/// <summary>
	///  Properties
	/// </summary>
	private bool ShowGroups = false;
	private HxGrid<CashRegister> grid = new();
	private List<CashRegister> reportsList = [];
	private int reportsCount = 0;

	private HxModal clientsModal = new();
	private List<RKeyValue> paymentList = new List<RKeyValue>() { new RKeyValue() { Name = "Načítání plateb...", Id = -1} };

	private IListItem? selectedClient { get; set; }
	private string clientName { get => (selectedClient is null) ? "" : selectedClient.Name; set{} }// jenom pro TextInput

	private CashRegisterFilter filter = new()
	{
		PaymentId = -1,// change, default
		ModuleId = null,// change
		ClientId = null,
	};

	private int selectedRadio = 1;
	private readonly List<RKeyValue> radioList = new() 
	{ 
		new() { Id = 1, Name = "Dle položek" }, 
		new() { Id = 2, Name = "Dle vlastnosti" } 
	};
	/// <summary>
	/// Functions
	/// </summary>
	protected override async Task OnInitializedAsync()
	{
		moduleWorkspace.ModuleId = idModule;
		filter.ModuleId = moduleWorkspace.Id;

		filter.From = DateTime.Today.ToUniversalTime().AddHours(1);
		filter.To = DateTime.Today.ToUniversalTime().AddHours(1);
		//load payment enum
		var response = await _service.GetAllAsync<Payment>($"?moduleId={moduleWorkspace.Id}", moduleWorkspace.Id);

		if (response is List<Payment> payments && payments.Any())
		{
			paymentList = payments.Select(p => new RKeyValue() { Name = p.Name, Id = p.Id }).ToList();
			filter.PaymentId = payments.First().Id;

			await ApplyFilter(filter);
		}
		else
		{
			var errorMessage = "Nastala neočekávaná chyba.";
			if (response is ErrorResponse error)
				errorMessage = error.ErrorMessage;
			Messenger.AddError(title: "Chyba při smazáni", message: errorMessage);
		}

	}
	private Task<GridDataProviderResult<CashRegister>> GetGridData(GridDataProviderRequest<CashRegister> request)
	{
		if (!ShowGroups)
		{
			reportsCount = reportsList.Count();
			StateHasChanged();
			return Task.FromResult(request.ApplyTo(reportsList));
		}

		IEnumerable<CashRegister> grouped;
		switch (selectedRadio)
		{
			case 1:
				grouped = reportsList.GroupBy(r => r.RecordId)
						.Select(g =>
							new CashRegister()
								{
									Id = g.Key,
									RecordName = g.First().RecordName,
									Price = g.Sum(r => r.Price),
									AccountA = g.First().AccountA,
									AccountS = g.First().AccountS
								}
						);
				break;
			default:
				grouped = reportsList.GroupBy(r => r.RecordAttributeId)
						.Select(g =>
							new CashRegister()
								{
									Id = g.Key,
									RecordName = g.First().RecordAttributeName,
									Price = g.Sum(r => r.Price),
									AccountA = g.First().AccountA,
									AccountS = g.First().AccountS
								}
						);
				break;
		}

		reportsCount = grouped.Count();
		StateHasChanged();

		return Task.FromResult(request.ApplyTo(grouped));
	}
	private async Task ApplyFilter(IFilterReport _filter)
	{
		ShowGroups = false;
		if(_filter is CashRegisterFilter f)
		{
			f.ClientId = selectedClient?.Id;
			//Filter prepared

			var response = await _service.GetAllAsync<CashRegister>("?",moduleWorkspace.Id,f);

			if (response is List<CashRegister> list)
			{
				reportsList = list;
				await grid.RefreshDataAsync();
			}
			else
			{
				var errorMessage = "Nastala neočekávaná chyba.";
				if (response is ErrorResponse error)
					errorMessage = error.ErrorMessage;
				Messenger.AddError(title: "Chyba při smazáni", message: errorMessage);
			}
		}
	}

}