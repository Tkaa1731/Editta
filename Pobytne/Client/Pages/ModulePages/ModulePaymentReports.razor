@page "/{idModule}/PaymentReports"
@inject PobytneService _service
@inject ExcelExportService _csvService

<ModuleNav idModule="@idModule"></ModuleNav>

<div class="row">
	<div class="col">

		<HxListLayout TFilterModel="HxListLayout.NoFilter">
			<TitleTemplate>
				Souhrny pokladna <HxBadge Color="ThemeColor.Light" TextColor="ThemeColor.Dark" CssClass="ms-1 fs-6">@reportsList.Count</HxBadge>
			</TitleTemplate>
			<DataTemplate>
				<HxGrid @ref="grid" 
						TItem="CashRegister"
						DataProvider="GetGridData"
						PageSize="20"
						Responsive="true"
						>
					<Columns>
						<HxGridColumn HeaderText="Id" ItemTextSelector="cash => cash.Id.ToString()" />
						<HxGridColumn HeaderText="Datum" ItemTextSelector="cash => cash.InteractionDate.ToShortDateString()" SortKeySelector="cash => cash.InteractionDate" />
						<HxGridColumn HeaderText="Název položky" ItemTextSelector="cash => cash.RecordName" SortKeySelector="cash => cash.RecordName"/>
						<HxGridColumn HeaderText="Popis" ItemTextSelector="cash => cash.InteractionDescription" />
						<HxGridColumn HeaderText="Částka" ItemTextSelector="cash => cash.Price.ToString()" SortKeySelector="cash=>cash.Price"/>
						<HxGridColumn HeaderText="Uživatel" ItemTextSelector="cash => cash.CustomerName" SortKeySelector="cash => cash.CustomerName"/>
						<HxGridColumn HeaderText="Změnil" ItemTextSelector="cash => cash.CreationUserName" SortKeySelector="cash => cash.CreationUserName"/>
						<HxGridColumn HeaderText="Změněno" ItemTextSelector="cash => cash.CreationDate.ToString()" SortKeySelector="cash => cash.CreationDate"/>
					</Columns>
				</HxGrid>
			</DataTemplate>
		</HxListLayout>

	</div>
	<div class="col-4" style="max-width:500px">
		<ReportFilter Filter="filter" OnFilterSubmit="ApplyFilter" OnExcelTransmit="async()=>await _csvService.ExportData(reportsList)" ExcelEnable="@(reportsList.Count > 0)">
@* Payment Filter *@
			<HxSelect TItem="Payment"
					  TValue="int"
					  Label="Platba"
					  Data="paymentList"
					  @bind-Value="filter.PaymentId"
					  Nullable="false"
					  TextSelector="@(p => p.Name)"
					  ValueSelector="@(p => p.Id)"
					  />

			<div class="w-100 pt-3"/>
@*Client Filter *@
			<HxCheckbox Label="Uzivatel" @bind-Value="clientFilter" Text="Vybrat uzivatele" />
			<HxInputText Enabled="false" InputCssClass="@(clientFilter?"bg-white":"")" @bind-Value="clientName">
				<InputGroupEndTemplate>
					<HxButton Enabled="clientFilter" Text="" Color="ThemeColor.Secondary" Outline="true" Icon="BootstrapIcon.Search" OnClick="async()=>await clientsModal.ShowAsync()" />
				</InputGroupEndTemplate>
			</HxInputText>

			
		</ReportFilter>


	</div>
</div>
<HxModal @ref="clientsModal" Centered=true Title="Klienti" Backdrop="ModalBackdrop.Static" Size="ModalSize.Large">
	<BodyTemplate>
		<ClientList Editable="false" @bind-Value="selectedClient"/>
	</BodyTemplate>
	<FooterTemplate>
		<HxButton Text="Potvrdit" OnClick="async()=>await clientsModal.HideAsync()" Color="ThemeColor.Primary" />
	</FooterTemplate>
</HxModal>
<style>
	div.dark {
		background-color: #0a1725;
		color: #fff;
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
	}
</style>
@code {
	[EditorRequired]
	[Parameter]
	public string idModule { get; set; } = "-1";
	[CascadingParameter]
	private ModuleWorkplace moduleWorkplace { get; set; } = default!;
	/// <summary>
	///  Properties
	/// </summary>
	public HxGrid<CashRegister> grid = new();
	private List<CashRegister> reportsList = [];

	private HxModal clientsModal = new();
	private List<Payment> paymentList = new() { new Payment() { Id = 1, Name="Platba Kartou" }, new Payment() { Id = 2, Name = "Platba Hotove" } };


	private bool clientFilter { get => _clientFilter; set{ _clientFilter = value; if (!value) selectedClient = null; } }
	private bool _clientFilter = false;
	private IListItem? selectedClient { get; set; }
	private string clientName { get => (selectedClient is null) ? "" : selectedClient.Name; set{} }// jenom pro TextInput

	private CashRegisterFilter filter = new()
	{
		PaymentId = 1,// change
		ModuleId = null,// change
		ClientId = null,
		RecordId = null,
		From = DateTime.Today,
		To = DateTime.Today.AddDays(1),
	};
	/// <summary>
	/// Functions
	/// </summary>
	protected override async void OnInitialized()
	{
		moduleWorkplace.ModuleId = idModule;

		await ApplyFilter(filter);
	}
	private Task<GridDataProviderResult<CashRegister>> GetGridData(GridDataProviderRequest<CashRegister> request) => Task.FromResult(request.ApplyTo(reportsList));

	private async Task ApplyFilter(IFilterReport _filter)
	{
		if(_filter is CashRegisterFilter f)
		{
			f.ClientId = selectedClient?.Id;
			f.ModuleId = moduleWorkplace.Id;

			//Filter prepared
			var response = await _service.GetFilteredReports<CashRegisterFilter,CashRegister>(f,moduleWorkplace.Id);

			if (response is null)
				Console.WriteLine($"NO RESPONSE");
			else if (response is ErrorResponse response1)
				Console.WriteLine($"{response1.ErrorMessage}");
			else if (response is List<CashRegister> list)
			{
				reportsList = list;
				await grid.RefreshDataAsync();
			}
		}
	}
}