@page "/{idModule}/Records"
@inject PobytneService _service
@inject IHxMessengerService Messenger

<ModuleNav idModule="@idModule" PageTitle="Evidence"></ModuleNav>

<div class="row">
    @if(maxDepth > 0)
    {   
        @for (int i = 0; i < maxDepth; i++)
        {
            <div class="col custom-scrollbar overflow-auto h-max" style="min-width:14rem; "> 
                @for(int j = 0; j < records[i].Count; j++)
                {
                    <RecordComponent Source=@records[i][j] OnClick=OnSelect CssClass="@((recordPath[i]==records[i][j].Record.Id)?"record-active":"")"></RecordComponent>
                }
            </div>
        }
        //interakce komponenta  
        <div class="col card p-3 h-max d-flex flex-column justify-content-between border-top border-2 floating-card" style="min-width:30rem;">
            <div  class="overflow-hidden d-flex flex-column" style="flex:1;">
                <!--Kalendar-->
                    <HxInputDate CalendarIcon="BootstrapIcon.Calendar" @bind-Value="interaction.InteractionDate" InputSize="InputSize.Large" Label="Datum interakce"/>
                <!-- Seznam položek -->
                <div  class="custom-grid-overflow overflow-hidden mt-3">
                    <InteractionComponent @bind-Records="interaction.Records"></InteractionComponent>
                </div>
            </div>
            <div>
                <hr class="my-3" style="height: 2px;color: #999;">
                <div>
                    <span><b>Celkem:</b></span>
                    <p class="ms-2 fw-normal h3">@interaction.Records.Sum( r => r.Price*r.Quantity) Kč</p>
                </div>
                <HxInputTextArea Label="Poznámka" LabelType="LabelType.Floating" MaxLength="200" @bind-Value="interaction.InteractionName" CssClass="my-2" />
            
                <HxButton CssClass="w-100 my-1" Text="Potvrdit" Color=ThemeColor.Success OnClick="SubmitHandler" Enabled="(interaction.Records.Count>0)"></HxButton>
                <HxButton CssClass="w-100" Text="Smazat vse" Color=ThemeColor.Danger Enabled="(interaction.Records.Count>0)" OnClick="()=>{interaction.Records.Clear();interaction.InteractionName = string.Empty;}"></HxButton>
            </div>
        </div>

    }
</div>

<HxModal @ref="clientsModal" Title="Vyberte klienta" Centered=true Backdrop="ModalBackdrop.Static" Size="ModalSize.Large">
	<BodyTemplate>
        <ClientList @bind-Value="selectedClient" Editable="false"/>
	</BodyTemplate>
	<FooterTemplate>
        <HxButton Text="Potvrdit" OnClick="HandleModalSubmit" Color="ThemeColor.Primary" CssClass="w-100"/>
	</FooterTemplate>
</HxModal>
<HxModal @ref="paymentsModal" Centered=true Title="Vyberte typ platby"  Backdrop="ModalBackdrop.Static" Size="ModalSize.Large">
	<BodyTemplate>
        <div class="container">
		    <div class="row justify-content-center">
                @for (int i = 0; i < AllPayments.Count; i++)
                {
                    Payment localPayment = @AllPayments[i];
                    <a class="col m-3 no-link" @onclick="()=>PaymentSelectedHandler(localPayment.Id)">
                        <div class="p-3 row align-items-center" style="min-width: 18rem;background:@cardColor[(int)localPayment.Type]" >
                            <HxIcon Icon="@cardIcon[(int)localPayment.Type]" CssClass="h1 col-4"></HxIcon>
                            <span class="col">@AllPayments[i].Name</span>
                        </div>
                    </a>
                }
            </div>
        </div>
	</BodyTemplate>
</HxModal>
<style>
    .record-container:hover{
        background: #e3e6ef;
    }
    .bt-red{
        border-top:2px solid #9EBAFB !important;
    }
    .bt-green{
        border-top:2px solid #75d2a9 !important;
    }
    .bt-purple{
        border-top:2px solid #747ced !important;
    }
    .bt-orange{
        border-top:2px solid orange !important;
    }
    .record-active.bt-orange{
        border-top:none;
        background: #FFDB99;
    }
    .center{
        text-align:center;
    }
    .p-0{
        padding:0;
    }
@*     .scrollable-table-container {
		max-height: 40svh;
		overflow: auto;
	} *@
</style>

@code {
    [EditorRequired]
    [Parameter]
    public string idModule { get; set; } = "-1";
    [CascadingParameter]
    private ModuleWorkplace moduleWorkspace { get; set; } = default!;

    private int maxDepth = 0;
    private Interaction interaction = new();
    private Dictionary<int,List<RecordTreeView>> records = new();
    private int[] recordPath;

    private IListItem? selectedClient;
    private List<Payment> AllPayments = [];

    private HxModal clientsModal = new();
    private HxModal paymentsModal = new();

    private float sum
    {
        get
        {
            return interaction.Records.Sum(sr => sr.PriceAmount);
        }
    }
    private string[] cardColor = {"#ADD8E6","#FFA500","#B576D5","#ACE07B"};
    private IconBase[] cardIcon = { BootstrapIcon.CashCoin, BootstrapIcon.CreditCard, BootstrapIcon.Bank, BootstrapIcon.TicketPerforated };

    protected async override Task OnInitializedAsync()
    {
        moduleWorkspace.ModuleId = idModule;
        //update moduleWorkspace

        var depth = await _service.GetCountAsync<Record>($"?moduleId={moduleWorkspace.Id}", moduleWorkspace.Id);
        if (ServiceRequest<int>(depth) && depth is int d)
        {
            maxDepth = d+1;
            recordPath = new int[d+1];
            for (int i = 0; i < maxDepth; i++)
                records[i] = new();

            var root = await _service.GetAllAsync<Record>($"?moduleId={moduleWorkspace.Id}", moduleWorkspace.Id);
            if (ServiceRequest<List<Record>>(root) && root is List<Record> r)
            {
                List<RecordTreeView> rootTV = [];
                foreach (var rtv in r)
                {
                    var tv = new RecordTreeView(_service) { Record = rtv };
                    if (tv.Active)
                        rootTV.Add(tv);
                }
                records[0] = rootTV;
            }
        }
    }
    private bool ServiceRequest<T>(object? response)
    {
        if(response is T)
            return true;
        var errorText = "Vyskytla se neočekávaná chyba";
        if (response is ErrorResponse error)
            errorText = error.ErrorMessage;
        Messenger.AddError(title: "Chyba při ukladani", message: errorText );
        return false;
    }
    private async Task OnSelect(RecordTreeView rtv)
    {  
        if(rtv.Record.RecordType == ERecordType.Folder)
        {
            recordPath[rtv.Depth] = rtv.Record.Id;
            await rtv.LoadData();
            var selectedActive = rtv.SubRecords.Where(r => r.Active).ToList();

            if(selectedActive  is not null)
                records[rtv.Depth + 1] = selectedActive;

            for (int i = rtv.Depth + 2; i < maxDepth; i++)
            {
                records[i].Clear();
                recordPath[i] = -1;
            }
        }
        else
        {
            var r = rtv.Record;
            if(rtv.SeasonTickedSelected)
                //TODO: Doresit pernamentky
                interaction.Records.Add(
                    new() {
                            RecordId = r.Id,
                            Name = r.Name,
                            Quantity = r.GroupQuantity,
                            Price = r.GroupPrice,
                            Adult = r.Adult,
                            Child = r.Child,
                            Order = interaction.Records.Count,
                            IsBalanceCheck = r.IsBalanceCheck,
                            IsClientRequired = r.IsClientRequired,
                            IsSeasonTicket = true,
                            RecordType = r.RecordType
                    });
            else
                interaction.Records.Add(
                    new() {
                            RecordId = r.Id,
                            Name = r.Name,
                            Quantity = r.Quantity,
                            Price = r.Price,
                            Adult = r.Adult,
                            Child = r.Child,
                            Order = interaction.Records.Count,
                            IsBalanceCheck = r.IsBalanceCheck,
                            IsClientRequired = r.IsClientRequired,
                            IsSeasonTicket = false,
                            RecordType = r.RecordType
                    });
        }
    }
    private async Task SubmitHandler()// submit po zadani cele objednavky
    {     
        bool customerRequired = interaction.Records.Exists(r => r.IsClientRequired);
        if (customerRequired)
        {
            // modal
            await clientsModal.ShowAsync();
            return;
        }
        await LoadPayments();
        await paymentsModal.ShowAsync();
    }
    private async Task HandleModalSubmit()
    {
        if(selectedClient is not null)
        {
            await clientsModal.HideAsync();
            //payment
            await LoadPayments();
            await paymentsModal.ShowAsync();
        }
        return;
    }
    private async Task InsertInteraction()
    {
        var response = await _service.InsertAsync<Interaction>(interaction, moduleWorkspace.Id);

        if (ServiceRequest<Task>(response))
        {
            Messenger.AddInformation(title: "Vše v pořádku", message:"Interakce byla úspěšně uložena");           
            //clear
            interaction = new();
            recordPath = new int[maxDepth];
            for (int i = 1; i < maxDepth; i++)
                records[i].Clear();

            await Task.Delay(1500);
            Messenger.Clear();
        }
    }
    private async Task PaymentSelectedHandler(int paymentId)
    {
        await paymentsModal.HideAsync();

        interaction.Id = 0;
        interaction.ModuleId = int.Parse(idModule);
        interaction.ClientId = (selectedClient is null)? 0 : selectedClient.Id;
        interaction.TimeStamp = DateTime.Now;
        interaction.CreationUserId = moduleWorkspace.UserId;
        interaction.InteractionDate = DateTime.Now;
        interaction.PaymentId = paymentId;

        await InsertInteraction();
    }
    private async Task LoadPayments()
    {
        var response = await _service.GetAllAsync<Payment>($"?moduleId={moduleWorkspace.Id}", moduleWorkspace.Id);
        if(ServiceRequest<List<Payment>>(response) && response is List<Payment> list)
            AllPayments = list.Where(p => p.ValidTo >= DateTime.Now ).ToList();
    }
}
