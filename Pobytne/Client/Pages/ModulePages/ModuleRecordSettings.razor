@page "/{idModule}/RecordSettings"
@inject PobytneService service
@inject IHxMessengerService Messenger
@inject IHxMessageBoxService MessageBox

<ModuleNav idModule="@idModule" PageTitle="Evidence položek"></ModuleNav>

<AuthorizeView Policy="PermitionPolicy" Resource=(EPermition.Record,EAccess.ReadOnly,idModule)>
    <Authorized>

        <div class="row h-100">
            <div class="col-lg-3 mh-100 overflow-hidden">
                <HxTreeView TItem="IDirectory"
                            SelectedItemChanged="OnSelect"
                            OnItemExpanded="OnExpanded"
                            Items="@fileSystem"
                            CssClass="p-3 card floating-card h-auto"
                            ItemTitleSelector="@(p => p.Name)"
                            ItemIconSelector="@(p => p.Icon)"
                            ItemChildrenSelector="@(p => p.SubDirectories)" />
            </div>
            <div class="col-lg-9 mh-100 overflow-hidden">
                <ListCustom 
                    ListTitle="Počet záznamů" 
                    ListItems=@listOfItems 
                    selectedItem=selectedItem 
                    selectedItemChanged=OnItemSelect 
                    EventNewItem="OnNewItem">

                    <MenuGridColumn>
		                <HxContextMenuGridColumn TItem="IListItem" Context="item">

			                <HxButton Icon="@BootstrapIcon.Trash" style="color:red; padding: 0px;" Color="ThemeColor.Link" Tooltip="Smazat" CssClass="px-3" OnClick="async()=> await OnDeleteItem(item)"/>
                            @if(item is Record r && r.IsBalanceCheck)
                            {
                            <HxButton Icon="@BootstrapIcon.BagPlus" Color="ThemeColor.Link" style="color:#50a732; padding: 0px;" Tooltip="Naskladnit" CssClass="px-3" OnClick="async()=>await OnStockAdd(item)" />
                            }
                        </HxContextMenuGridColumn>
	                </MenuGridColumn>

                </ListCustom>
            </div>
        </div>
        <FormModal @ref=formModal formItem="formItem" OnSuccessRequest="OnSuccessRequestHandler"/>
        
    </Authorized>
    <NotAuthorized>
        JSTE V NOACCESS MODU PRO  PRISTUP - APLICATION
    </NotAuthorized>
</AuthorizeView>
<style>
    .scrollable-table-container {
		max-height: 70svh;
		overflow: auto;
	}
</style>
@code {
    [EditorRequired]
    [Parameter]
    public string idModule { get; set; } = "-1";
    [CascadingParameter]
    private ModuleWorkplace moduleWorkspace { get; set; } = default!;

    private IDirectory? selectedDirectory;
    private IListItem? selectedItem;
    private IListItem? formItem;
    private List<IListItem>? listOfItems;
    private List<RecordDir> fileSystem = [];

    private FormModal? formModal;


    private async Task OnDeleteItem(IListItem deleteItem)
    {
        var deleteMessage = await MessageBox.ShowAsync("Smazat položku",$"Opravdu chcete smazat položku: {deleteItem.Name}", MessageBoxButtons.YesNo);
        if (deleteMessage == MessageBoxButtons.No)
            return;

        var response = await service.DeleteAsync<Record>(deleteItem.Id, moduleWorkspace.Id);

        if(response is ErrorResponse error)
            Messenger.AddError(title: "Chyba při smazáni", message: error.ErrorMessage );
        else
        {
            listOfItems?.Remove(deleteItem);
            StateHasChanged();//UpdateTreeView
            Messenger.AddInformation(title: "Vše v pořádku", message: "Záznam byl úspěšně smazán.");
            await Task.Delay(1500);
            Messenger.Clear();
        }
    }
    private async Task OnStockAdd(IListItem item)
    {
        if(item is Record r && formModal is not null)
        {
            formItem = new RecordStock() { RecordId = r.Id};
            await formModal.InsertForm();     
        }
    }
    private async Task OnSelect(IDirectory e)
    {
        this.selectedDirectory = e;
        if (selectedDirectory is not null)
        {
            await selectedDirectory.OnSelect();
            listOfItems = selectedDirectory.ItemsList;
        }
    }
    private async Task OnExpanded(IDirectory e)
    {
        if (e is not null)
        {
            await e.OnExpanded();
            StateHasChanged();
        }

    }
    private void ItemsChangedHandler(List<RecordDir> dir)
    {
        fileSystem = dir;
    }
    private async Task OnItemSelect(IListItem i)
    {
        if (i is not null && formModal is not null)
        {
            formItem = (IListItem)i.Clone();
            await formModal.UpdateForm();
        }
        selectedItem = null;
    }
    protected override async Task OnInitializedAsync()
    {
		moduleWorkspace.ModuleId = idModule;

        fileSystem.Add(
            new RecordDir(
                service,
                new Record
                    {
                        Name = "Evidence",
                        Id = 0,
                        ModuleId = int.Parse(idModule),
                        RootId = 0,
                        ParentId = 0,
                        StructDepth = -1,//!First depthLevel must be 0
                    }
            )
            {
                Icon = BootstrapIcon.Archive
            }
        );
        await fileSystem[0].OnSelect();
    }
    private async Task OnNewItem()
    {
        if (selectedDirectory is not null && formModal is not null)
        {
            formItem = selectedDirectory.GetNew();
            await formModal.InsertForm();
        }
    }
    private async Task OnSuccessRequestHandler((IListItem,EForm) item)
    {
        switch (item.Item2)
        {
            case EForm.Insert:
                selectedDirectory?.Insert(item.Item1);
                break;
            case EForm.Update:
                selectedDirectory?.Update(item.Item1);
                break;
        }
        await OnSelect(selectedDirectory!); // Update ListCustom   
        StateHasChanged();
    }
}

