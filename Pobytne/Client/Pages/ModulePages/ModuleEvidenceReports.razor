@page "/{idModule}/EvidenceReports"
@attribute [Authorize]
@inject PobytneService _service
@inject IHxMessengerService Messenger
@inject ExcelExportService _excelService

<ModuleNav idModule="@idModule" PageTitle="Souhrny evidence"></ModuleNav>

<AuthorizeView Policy="PermitionPolicy" Resource=(EPermition.EvidenceSummary,EAccess.ReadOnly,idModule)>
    <Authorized>
		<div class="row h-100">
			<div class="col mh-100 overflow-hidden">

				<HxListLayout TFilterModel="HxListLayout.NoFilter" CssClass="floating-card">
					<TitleTemplate>
						Počet záznamů evidence <HxBadge Color="ThemeColor.Light" TextColor="ThemeColor.Dark" CssClass="ms-1 fs-6">@reportsCount</HxBadge>
					</TitleTemplate>
					<DataTemplate>
						<HxGrid @ref="grid" 
								TItem="Evidence"
								DataProvider="GetGridData"
								Responsive="true"
								ContentNavigationMode="GridContentNavigationMode.Pagination"
								HeaderRowCssClass="sticky-top"
								PageSize="18"
								ItemRowHeight="20">
							<Columns>
								@if (ShowGroups)
								{
									<HxGridColumn HeaderText="Id" ItemTextSelector="evidence => evidence.Id.ToString()" />
									<HxGridColumn HeaderText="Název" ItemTextSelector="evidence => evidence.RecordName" SortKeySelector="evidence => evidence.RecordName"/>
									<HxGridColumn HeaderText="Kusy" ItemTextSelector="evidence => evidence.Quantity.ToString()" />
									<HxGridColumn HeaderText="Dospělí" ItemTextSelector="evidence => evidence.Adult.ToString()" />
									<HxGridColumn HeaderText="Dítě" ItemTextSelector="evidence => evidence.Child.ToString()" />	
									<HxGridColumn HeaderText="ÚčetA" ItemTextSelector="evidence => evidence.AccountA.ToString()" SortKeySelector="evidence=>evidence.AccountA"/>						
									<HxGridColumn HeaderText="ÚčetS" ItemTextSelector="evidence => evidence.AccountS.ToString()" SortKeySelector="evidence=>evidence.AccountS"/>	
								}
								else
								{
							
									<HxGridColumn HeaderText="Id" ItemTextSelector="evidence => evidence.Id.ToString()"/>
									<HxGridColumn HeaderText="Datum" ItemTextSelector="evidence => evidence.InteractionDate.ToShortDateString()" SortKeySelector="evidence => evidence.InteractionDate" />
									<HxGridColumn HeaderText="Název položky" ItemTextSelector="evidence => evidence.RecordName" SortKeySelector="evidence => evidence.RecordName"/>
									<HxGridColumn HeaderText="Popis" ItemTextSelector="evidence => evidence.InteractionDescription" />
									<HxGridColumn HeaderText="Kusy" ItemTextSelector="evidence => evidence.Quantity.ToString()" />
									<HxGridColumn HeaderText="Dospělí" ItemTextSelector="evidence => evidence.Adult.ToString()" />
									<HxGridColumn HeaderText="Dítě" ItemTextSelector="evidence => evidence.Child.ToString()" />
									<HxGridColumn HeaderText="Uživatel" ItemTextSelector="evidence => evidence.CustomerName" SortKeySelector="evidence => evidence.CustomerName"/>
									<HxGridColumn HeaderText="Změnil" ItemTextSelector="evidence => evidence.CreationUserName" SortKeySelector="evidence => evidence.CreationUserName"/>
									<HxGridColumn HeaderText="Změněno" ItemTextSelector="evidence => evidence.CreationDate.ToString()" SortKeySelector="evidence => evidence.CreationDate"/>
								}
							</Columns>
						</HxGrid>
					</DataTemplate>
				</HxListLayout>

			</div>
			<div class="col-4 d-flex flex-column overflow-hidden h-max" style="max-width:500px">
				<div class="p-3 mb-3 card floating-card">
					<div class="row">
						<h5 class="col">Kusy</h5>
		@* 				<h5 class="col">0</h5> *@
						<h5 class="col">@reportsList.Sum(r=>r.Quantity)</h5>
					</div>			
					<div class="row">
						<h5 class="col">Dospělí</h5>
		@* 				<h5 class="col">0</h5> *@
						<h5 class="col">@reportsList.Sum(r=>r.Adult)</h5>
					</div>			
					<div class="row">
						<h5 class="col">Dítě</h5>
		@* 				<h5 class="col">0</h5> *@
						<h5 class="col">@reportsList.Sum(r=>r.Child)</h5>
					</div>
				</div>
				<ReportFilter 
					Filter="filter" 
					OnFilterSubmit="ApplyFilter" 
					OnExcelTransmit="async()=>await _excelService.ExportData(reportsList)" 
					OnGroupBySubmit="async()=>{ShowGroups = true;await grid.RefreshDataAsync();}"
					ExcelEnable="@(reportsList.Count > 0)"
				>
					<FilterTemplate>
						<div>			
							@*More Filter *@
			@* 				<div class="row">
							<HxSelect TItem="Radio"
										  TValue="int?"
										  Label="OSPOD"
										  Enabled="false"
										  Data="radioList"
										  @bind-Value="filter.OSPOD"
										  Nullable="true"
										  TextSelector="@(m => m.Name)"
										  ValueSelector="@(m => m.Id)" 
										  CssClass="col"/>
							<HxSelect TItem="Radio"
										  TValue="int?"
										  Label="Typ dohody"
										  Enabled="false"
										  Data="radioList"
										  @bind-Value="filter.ContractType"
										  Nullable="true"
										  TextSelector="@(m => m.Name)"
										  ValueSelector="@(m => m.Id)" 
										  CssClass="col"/>
							</div> *@

							<HxInputText Label="Uzivatel" Enabled="false" CssClass="col" InputCssClass="bg-white border-end-0" @bind-Value="clientName">
									<InputGroupEndTemplate>
										@if (selectedClient is not null)
										{
											<HxButton Icon="@BootstrapIcon.XLg" style="color:red;" Color="ThemeColor.Link" OnClick="()=>selectedClient = null" CssClass="border-top border-bottom text-danger" />
										}
										<HxButton Text="" Color="ThemeColor.Primary" Outline="true" Icon="BootstrapIcon.Search" OnClick="async()=>await clientsModal.ShowAsync()" />
									</InputGroupEndTemplate>
							</HxInputText>
						</div>

					</FilterTemplate>
					<GroupByTemplate>

						<HxRadioButtonList Label="Souhrny podle:"
						   TItem="RKeyValue"
						   TValue="int"
						   Data="@radioList"
						   @bind-Value="@selectedRadio"
						   ItemTextSelector="@(r => r.Name)"
						   ItemValueSelector="@(r => r.Id)" />
						<HxCheckbox @bind-Value="compareCheckBox" Text="Porovnání dle let" Enabled="false"/>

					</GroupByTemplate>
			
				</ReportFilter>


			</div>
		</div>
	</Authorized>
</AuthorizeView>

<HxModal @ref="clientsModal" Centered=true Backdrop="ModalBackdrop.Static" Size="ModalSize.Large">
	<BodyTemplate>
		<ClientList Editable="false" @bind-Value="selectedClient"/>
	</BodyTemplate>
	<FooterTemplate>
		<HxButton Text="Potvrdit" OnClick="async()=>{StateHasChanged();await clientsModal.HideAsync();}" Color="ThemeColor.Primary" CssClass="w-100" />
	</FooterTemplate>
</HxModal>
@code 
{
	[EditorRequired]
	[Parameter]
	public string idModule { get; set; } = "-1";
	[CascadingParameter]
	private ModuleWorkplace moduleWorkspace { get; set; } = default!;
	/// <summary>
	///  Properties
	/// </summary>
	private bool ShowGroups = false;
	public HxGrid<Evidence> grid = new();

	private List<Evidence> reportsList = [];
	private int reportsCount = 0;

	private HxModal clientsModal = new();

	private IListItem? selectedClient { get; set; }
	private string clientName { get => (selectedClient is null) ? "" : selectedClient.Name; set{} }// jenom pro TextInput

	private EvidenceFilter filter = new()
	{
		ModuleId = null,// change
		ClientId = null,
		OSPOD = null,
		ContractType = null
	};

	private int selectedRadio = 1;
	private readonly List<RKeyValue> radioList = new() 
	{ 
		new() { Id = 1, Name = "Dle položek" },
		new() { Id = 2, Name = "Dle vlastnosti" },
		new() { Id = 3, Name = "Dle uživatele" },
	};
	private bool compareCheckBox = false;
	/// <summary>
	/// Functions
	/// </summary>
	protected override async Task OnInitializedAsync()
	{
		moduleWorkspace.ModuleId = idModule;

		filter.ModuleId = moduleWorkspace.Id;
		filter.From = DateTime.Today.ToUniversalTime().AddHours(1);
		filter.To = DateTime.Today.ToUniversalTime().AddHours(1);

		await ApplyFilter(filter);
	}
	private Task<GridDataProviderResult<Evidence>> GetGridData(GridDataProviderRequest<Evidence> request)
	{
		if (!ShowGroups)
		{
			reportsCount = reportsList.Count();
			StateHasChanged();
			return Task.FromResult(request.ApplyTo(reportsList));
		}

		IEnumerable<Evidence> grouped;
		switch (selectedRadio)
		{
			case 1:
				grouped = reportsList.GroupBy(r => r.RecordId)
						.Select(g =>
							new Evidence()
								{
									Id = g.Key,
									RecordName = g.First().RecordName,
									Quantity = g.Sum(r => r.Quantity),
									Adult = g.Sum(e => e.Adult),
									Child = g.Sum(e => e.Child),
									AccountA = g.First().AccountA,
									AccountS = g.First().AccountS
								}
						);
				break;
			case 2:
				grouped = reportsList.GroupBy(r => r.RecordAttributeId)
						.Select(g =>
							new Evidence()
								{
									Id = g.Key,
									RecordName = g.First().RecordAttributeName,
									Quantity = g.Sum(r => r.Quantity),
									Adult = g.Sum(e => e.Adult),
									Child = g.Sum(e => e.Child),
									AccountA = g.First().AccountA,
									AccountS = g.First().AccountS
								}
						);
				break;
			default:
				grouped = reportsList.GroupBy(r => r.ClientId)
						.Select(g =>
							new Evidence()
								{
									Id = g.Key,
									RecordName = g.First().CustomerName,
									Quantity = g.Sum(e => e.Quantity),
									Adult = g.Sum(e => e.Adult),
									Child = g.Sum(e => e.Child)
								}
						);
				break;
		}

		reportsCount = grouped.Count();
		StateHasChanged();

		return Task.FromResult(request.ApplyTo(grouped));
	}

	private async Task ApplyFilter(IFilterReport _filter)
	{
		if(_filter is EvidenceFilter f)
		{
			f.ClientId = selectedClient?.Id;
			// filter prepared
			var response = await _service.GetAllAsync<Evidence>("?",moduleWorkspace.Id,f);

			if (response is List<Evidence> list)
			{
				reportsList = list;
				await grid.RefreshDataAsync();
			}		
			else
			{
				var errorMessage = "Nastala neočekávaná chyba.";
				if (response is ErrorResponse error)
					errorMessage = error.ErrorMessage;
				Messenger.AddError(title: "Chyba při smazáni", message: errorMessage);
			}
		}
	}
}