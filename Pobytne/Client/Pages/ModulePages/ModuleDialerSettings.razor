@page "/{idModule}/DialerSettings/{dialerName}"
@inject PobytneService _service
@inject IHxMessengerService Messenger
@inject IHxMessageBoxService MessageBox

<ModuleNav idModule="@idModule" PageTitle="Číselníky"></ModuleNav>


	<HxTabPanel NavVariant="NavVariant.Pills" InitialActiveTabId="@dialerName" CssClass="card floating-card w-25 ms-4 mt-4 p-4 position-fixed" RenderMode="TabPanelRenderMode.ActiveTabOnly">
		<HxTab Title="Číselník typu plateb" TitleCssClass="mb-3" Id="PaymentDialer">
			<Content>
				<AuthorizeView Policy="PermitionPolicy" Resource=(EPermition.PaymentType,EAccess.ReadOnly,idModule)>
					<Authorized>
						<div class="d-flex">

							<div class="col">
								<div class="my-4" style="height:25vh;"/>
								<div class="card floating-card p-3 me-4 ">
									<PaymentForm formType="paymentFormType" payment="paymentForm" Enabled=@(paymentForm.ModuleId > 0)  OnValidSubmit="(args) => Request(args.Item1,args.Item2)"/>
								</div>
							</div>
				
							<HxListLayout TFilterModel="HxListLayout.NoFilter" CssClass="floating-card col-8">
								<TitleTemplate>
									Počet záznamů<HxBadge Color="ThemeColor.Light" TextColor="ThemeColor.Dark" CssClass="ms-1">@paymentList.Count</HxBadge>
								</TitleTemplate>
								<CommandsTemplate>
									<HxButton Text="Nová položka" Color="ThemeColor.Primary" Icon="BootstrapIcon.PlusLg" OnClick="()=>{paymentForm = new(){ModuleId = moduleWorkspace.Id}; paymentFormType = EForm.Insert;}" />
								</CommandsTemplate>
								<DataTemplate>
									<HxGrid @ref=paymentGrid
										TItem="Payment" 
										DataProvider="async(request)=>{if(!paymentList.Any()){paymentList = await LoadData<Payment>(); StateHasChanged();} return request.ApplyTo(paymentList);}" 
										Responsive="true" 
										SelectedDataItemChanged="(item)=>{paymentForm = (Payment)item.Clone(); paymentFormType = EForm.Update;}" 
										ContentNavigationMode="GridContentNavigationMode.Pagination"
										HeaderRowCssClass="sticky-top"
										PageSize="15">
										<Columns>
											<HxGridColumn HeaderText="Id" ItemTextSelector="payment => payment.Id.ToString()" />
											<HxGridColumn HeaderText="Název dokladu" ItemTextSelector="payment => payment.Name" />
											<HxGridColumn HeaderText="Typ platby" ItemTextSelector="payment => payment.Type.ToString()" />
											<HxGridColumn HeaderText="Prefix dokladu" ItemTextSelector="payment => payment.InvoicePrefix" />
											<HxGridColumn HeaderText="Číslo dokladu" ItemTextSelector="payment => payment.InvoiceNumber.ToString()" />

											<HxContextMenuGridColumn Context="payment">
												<HxButton Icon="@BootstrapIcon.Trash" style="color:red; padding: 0px;" Color="ThemeColor.Link" OnClick="async ()=> await DeleteItemClicked(payment)" />
											</HxContextMenuGridColumn>      
										</Columns>
									</HxGrid>
								</DataTemplate>
							</HxListLayout>
						</div>
					</Authorized>
				</AuthorizeView>
			</Content>
		</HxTab>
		<HxTab Title="Číselník vlastnosti záznamů" Id="ConstantDialer">
			<Content>
				<AuthorizeView Policy="PermitionPolicy" Resource=(EPermition.RecordAttribute,EAccess.ReadOnly,idModule)>
				    <Authorized>
						<div class="d-flex">
							<div class="col">
									<div class="my-4" style="height:25vh;" />
									<div class="card floating-card p-3 me-4">
										<RecordAttributeForm formType="attributeFormType"  recAttribute="attributeForm" Enabled=@(attributeForm.ModuleId > 0) OnValidSubmit="(args) => Request(args.Item1,args.Item2)" />
									</div>
							</div>
 							<HxListLayout TFilterModel="HxListLayout.NoFilter" CssClass="floating-card col-8">
								<TitleTemplate>
									Počet záznamů<HxBadge Color="ThemeColor.Light" TextColor="ThemeColor.Dark" CssClass="ms-1">@attributeList.Count</HxBadge>
								</TitleTemplate>
								<CommandsTemplate>
									<HxButton Text="Nová položka" Color="ThemeColor.Primary" Icon="BootstrapIcon.PlusLg" OnClick="()=>{attributeForm = new(){ModuleId = moduleWorkspace.Id}; attributeFormType = EForm.Insert;}" />
								</CommandsTemplate>
								<DataTemplate>
									<HxGrid @ref=attributeGrid
										TItem="RecordAttribute" 
										DataProvider="async(request)=>{if(!attributeList.Any()){attributeList = await LoadData<RecordAttribute>(); StateHasChanged();} return request.ApplyTo(attributeList);}" 
										Responsive="true" 
										SelectedDataItemChanged="(item)=>{attributeForm = (RecordAttribute)item.Clone(); attributeFormType = EForm.Update;}" 
										ContentNavigationMode="GridContentNavigationMode.Pagination"
										HeaderRowCssClass="sticky-top"
										PageSize="15">
										<Columns>
											<HxGridColumn HeaderText="Id" ItemTextSelector="attribute => attribute.Id.ToString()" />
											<HxGridColumn HeaderText="Název vlastnosti" ItemTextSelector="attribute => attribute.Name" />
											<HxGridColumn HeaderText="Typ záznamu" ItemTextSelector="attribute => attribute.Type.ToString()" />
											<HxGridColumn HeaderText="ÚčetA" ItemTextSelector="attribute => attribute.AccountA" />
											<HxGridColumn HeaderText="ÚčetS" ItemTextSelector="attribute => attribute.AccountS" />

											<HxContextMenuGridColumn Context="attribute">
												<HxButton Icon="@BootstrapIcon.Trash" style="color:red; padding: 0px;" Color="ThemeColor.Link" OnClick="async ()=> await DeleteItemClicked(attribute)" />
											</HxContextMenuGridColumn>   
										</Columns>
									</HxGrid>
								</DataTemplate>
							</HxListLayout>

						</div>
					</Authorized>
				</AuthorizeView>
			</Content>
		</HxTab>
	</HxTabPanel>

<style>
	.tab-content{
		height: 100% !important;
	}
</style>
@code {
	[EditorRequired]
	[Parameter]
	public string idModule { get; set; } = "-1";
	[EditorRequired]
	[Parameter]
	public string dialerName { get; set; } = "PaymentDialer";
	[CascadingParameter]
	private ModuleWorkplace moduleWorkspace { get; set; } = default!;

	private HxGrid<Payment> paymentGrid = default!;
	private List<Payment> paymentList = [];
	private Payment paymentForm = new();
	private EForm paymentFormType = EForm.Insert;

	private HxGrid<RecordAttribute> attributeGrid = default!;
	private List<RecordAttribute> attributeList = [];
	private RecordAttribute attributeForm = new();
	private EForm attributeFormType = EForm.Insert;

	protected override void OnInitialized()
	{
		moduleWorkspace.ModuleId = idModule;
		base.OnInitialized();
	}
	private async Task<List<T>> LoadData<T>()
	{
		var response = await _service.GetAllAsync<T>($"?moduleId={moduleWorkspace.Id}", moduleWorkspace.Id);

		if (response is null || response is ErrorResponse)
		{
			var errorText = "Vyskytla se neočekávaná chyba";
			if (response is ErrorResponse error)
				errorText = error.ErrorMessage;
			Messenger.AddError(title: "Chyba při načítání", message: errorText);
		}
		else if (response is List<T> list)
			return list;
		return [];
	}

	private async Task Request<T>(EForm e, T obj) where T: ACreation, new()
	{
		// ACreation
		obj.CreationDate = DateTime.Now;
		obj.CreationUserId = moduleWorkspace.UserId;

		// HTTP Request
		object? response = null;
		if (e == EForm.Update)
			response = await _service.UpdateAsync(obj, moduleWorkspace.Id);
		else if (e == EForm.Insert)
			response = await _service.InsertAsync(obj, moduleWorkspace.Id);


		if (response is null || response is ErrorResponse)
		{
			var errorText = "Vyskytla se neočekávaná chyba";
			if (response is ErrorResponse error)
				errorText = error.ErrorMessage;
			Messenger.AddError(title: "Chyba při ukladani", message: errorText);
		}
		else
		{
			Messenger.AddInformation(title: "Vše v pořádku", message: "Záznam byl úspěšně uložen.");

			switch (obj)
			{
				case Payment p:
					await OnSuccessRequest(p, e);
					break;
				case RecordAttribute ra:
					await OnSuccessRequest(ra, e);
					break;
			}			

			await Task.Delay(1000);
			Messenger.Clear();
		}
	}
	private async Task OnSuccessRequest(Payment p, EForm f)
	{
		paymentForm = new();
		paymentFormType = EForm.Insert;

		switch (f)
		{
			case EForm.Insert:
				paymentList.Add(p);
				break;
			case EForm.Update:
				var index = paymentList.FindIndex(i => i.Id == p.Id);
				if (index != -1)
					paymentList[index] = p;
				break;
		}
		await paymentGrid.RefreshDataAsync();

	}
	private async Task OnSuccessRequest(RecordAttribute ra, EForm f)
	{
		attributeForm = new();
		attributeFormType = EForm.Insert;

		switch (f)
		{
			case EForm.Insert:
				attributeList.Add(ra);
				break;
			case EForm.Update:
				var index = attributeList.FindIndex(i => i.Id == ra.Id);
				if (index != -1)
					attributeList[index] = ra;
				break;
		}
		await attributeGrid.RefreshDataAsync();
	}
	private async Task DeleteItemClicked<T>(T deleteItem) where T : class
	{
		MessageBoxButtons deleteMessage;
		object? response;
		switch (deleteItem)
		{
			case Payment p:
				deleteMessage = await MessageBox.ShowAsync("Smazat položku",$"Opravdu chcete smazat položku: {p.Name}", MessageBoxButtons.YesNo);
				if (deleteMessage == MessageBoxButtons.No)
					return;
				response = await _service.DeleteAsync<Payment>(p.Id, moduleWorkspace.Id);
				if(response is ErrorResponse error)
					Messenger.AddError(title: "Chyba při smazáni", message: error.ErrorMessage );
				else
				{
					paymentList.Remove(p);
					await paymentGrid.RefreshDataAsync();
					Messenger.AddInformation(title: "Vše v pořádku", message: "Záznam byl úspěšně smazán.");
				}
				break;
			case RecordAttribute ra:
				deleteMessage = await MessageBox.ShowAsync("Smazat položku",$"Opravdu chcete smazat položku: {ra.Name}", MessageBoxButtons.YesNo);
				if (deleteMessage == MessageBoxButtons.No)
					return;
				response = await _service.DeleteAsync<RecordAttribute>(ra.Id, moduleWorkspace.Id);        
				if(response is ErrorResponse error1)
					Messenger.AddError(title: "Chyba při smazáni", message: error1.ErrorMessage );
				else
				{
					attributeList?.Remove(ra);
					await attributeGrid.RefreshDataAsync();
					Messenger.AddInformation(title: "Vše v pořádku", message: "Záznam byl úspěšně smazán.");
				}
                break;
            default:
                return;
        }
        await Task.Delay(1500);
        Messenger.Clear();
    }

}
