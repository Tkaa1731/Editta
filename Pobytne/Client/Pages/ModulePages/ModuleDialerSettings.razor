@page "/{idModule}/DialerSettings/{dialerName}"
@inject PobytneService _service
@inject IHxMessengerService Messenger

<ModuleNav idModule="@idModule" PageTitle="Číselník"></ModuleNav>

<div class="w-100 h-100">

	<HxTabPanel NavVariant="NavVariant.Pills" InitialActiveTabId="@dialerName" CssClass="card floating-card w-25 ms-4 mt-4 p-4 position-fixed" RenderMode="TabPanelRenderMode.ActiveTabOnly">
		<HxTab Title="Číselník typu plateb" TitleCssClass="mb-3" Id="PaymentDialer" ContentCssClass="h-100">
			<Content>
				<div class="d-flex h-100">

					<div class="col">
						<div class="h-25 my-4" />
						<div class="card floating-card p-3 h-auto me-4 ">
							<PaymentForm formType="paymentFormType" payment="paymentForm" Enabled=@(paymentForm.ModuleId > 0)  OnValidSubmit="(args) => Request(args.Item1,args.Item2)"/>
						</div>
					</div>
				
					<HxListLayout TFilterModel="HxListLayout.NoFilter" CssClass="floating-card col-8">
						<TitleTemplate>
							Počet záznamů<HxBadge Color="ThemeColor.Light" TextColor="ThemeColor.Dark" CssClass="ms-1">@paymentList.Count</HxBadge>
						</TitleTemplate>
						<CommandsTemplate>
							<HxButton Text="Nová položka" Color="ThemeColor.Primary" Icon="BootstrapIcon.PlusLg" OnClick="()=>{paymentForm = new(){ModuleId = moduleWorkspace.Id}; paymentFormType = EForm.Insert;}" />
						</CommandsTemplate>
						<DataTemplate>
							<HxGrid TItem="Payment" 
								DataProvider="async(request)=>{if(!paymentList.Any()){paymentList = await LoadData<Payment>(); StateHasChanged();} return request.ApplyTo(paymentList);}" 
								Responsive="true" 
								SelectedDataItemChanged="(item)=>{paymentForm = item; paymentFormType = EForm.Update;}" 
								TableContainerCssClass="scrollable-table-container" 
								ContentNavigationMode="GridContentNavigationMode.InfiniteScroll"
								HeaderRowCssClass="sticky-top"
								ItemRowHeight="20">
								<Columns>
									<HxGridColumn HeaderText="Id" ItemTextSelector="payment => payment.Id.ToString()" />
									<HxGridColumn HeaderText="Název dokladu" ItemTextSelector="payment => payment.Name" />
									<HxGridColumn HeaderText="Typ platby" ItemTextSelector="payment => payment.Type.ToString()" />
									<HxGridColumn HeaderText="Prefix dokladu" ItemTextSelector="payment => payment.InvoicePrefix" />
									<HxGridColumn HeaderText="Číslo dokladu" ItemTextSelector="payment => payment.InvoiceNumber.ToString()" />

									<HxContextMenuGridColumn Context="payment">
										<HxButton Icon="@BootstrapIcon.Trash" style="color:red; padding: 0px;" Color="ThemeColor.Link" OnClick="async ()=> await DeleteItemClicked(payment)" />
									</HxContextMenuGridColumn>      
								</Columns>
							</HxGrid>
						</DataTemplate>
					</HxListLayout>
				</div>
			</Content>
		</HxTab>
		<HxTab Title="Číselník vlastnosti záznamů" Id="ConstantDialer"  ContentCssClass="h-100">
			<Content>
				<div class="d-flex h-100">
					<div class="col">
							<div class="h-25 my-4" />
							<div class="card floating-card p-3 h-auto me-4">
								<RecordAttributeForm formType="attributeFormType"  recAttribute="attributeForm" Enabled=@(attributeForm.ModuleId > 0) OnValidSubmit="(args) => Request(args.Item1,args.Item2)" />
							</div>
					</div>
 					<HxListLayout TFilterModel="HxListLayout.NoFilter" CssClass="floating-card col-8">
						<TitleTemplate>
							Počet záznamů<HxBadge Color="ThemeColor.Light" TextColor="ThemeColor.Dark" CssClass="ms-1">@attributeList.Count</HxBadge>
						</TitleTemplate>
						<CommandsTemplate>
							<HxButton Text="Nová položka" Color="ThemeColor.Primary" Icon="BootstrapIcon.PlusLg" OnClick="()=>{attributeForm = new(){ModuleId = moduleWorkspace.Id}; attributeFormType = EForm.Insert;}" />
						</CommandsTemplate>
						<DataTemplate>
							<HxGrid
								TItem="RecordAttribute" 
								DataProvider="async(request)=>{if(!attributeList.Any()){attributeList = await LoadData<RecordAttribute>(); StateHasChanged();} return request.ApplyTo(attributeList);}" 
								Responsive="true" 
								SelectedDataItemChanged="(item)=>{attributeForm = item; attributeFormType = EForm.Update;}" 
								TableContainerCssClass="scrollable-table-container" 
								ContentNavigationMode="GridContentNavigationMode.InfiniteScroll"
								HeaderRowCssClass="sticky-top"
								ItemRowHeight="20">
								<Columns>
									<HxGridColumn HeaderText="Id" ItemTextSelector="attribute => attribute.Id.ToString()" />
									<HxGridColumn HeaderText="Název vlastnosti" ItemTextSelector="attribute => attribute.Name" />
									<HxGridColumn HeaderText="Typ záznamu" ItemTextSelector="attribute => attribute.Type.ToString()" />
									<HxGridColumn HeaderText="ÚčetA" ItemTextSelector="attribute => attribute.AccountA" />
									<HxGridColumn HeaderText="ÚčetS" ItemTextSelector="attribute => attribute.AccountS" />

									<HxContextMenuGridColumn Context="attribute">
										<HxButton Icon="@BootstrapIcon.Trash" style="color:red; padding: 0px;" Color="ThemeColor.Link" OnClick="async ()=> await DeleteItemClicked(attribute)" />
									</HxContextMenuGridColumn>   
								</Columns>
							</HxGrid>
						</DataTemplate>
					</HxListLayout>

				</div>
			</Content>
		</HxTab>
	</HxTabPanel>
</div>
<style>
	.tab-content{
		height: 100% !important;
	}

	.scrollable-table-container {
		max-height: 80svh;
		overflow: auto;
	}
</style>
@code {
	[EditorRequired]
	[Parameter]
	public string idModule { get; set; } = "-1";
	[EditorRequired]
	[Parameter]
	public string dialerName { get; set; } = "PaymentDialer";
	[CascadingParameter]
	private ModuleWorkplace moduleWorkspace { get; set; } = default!;


	private List<Payment> paymentList = [];
	private Payment paymentForm = new();
	private EForm paymentFormType = EForm.Insert;

	private List<RecordAttribute> attributeList = [];
	private RecordAttribute attributeForm = new();
	private EForm attributeFormType = EForm.Insert;

	protected override void OnInitialized()
	{
		moduleWorkspace.ModuleId = idModule;
		base.OnInitialized();
	}
	private async Task<List<T>> LoadData<T>()
	{
		var response = await _service.GetAllAsync<T>($"?moduleId={moduleWorkspace.Id}", moduleWorkspace.Id);

		if (response is null || response is ErrorResponse)
		{
			var errorText = "Vyskytla se neočekávaná chyba";
			if (response is ErrorResponse error)
				errorText = error.ErrorMessage;
			Messenger.AddError(title: "Chyba při načítání", message: errorText);
		}
		else if (response is List<T> list)
			return list;
		return [];
	}

	private async Task Request<T>(EForm e, T obj) where T: ACreation, new()
	{

		// ACreation
		obj.CreationDate = DateTime.Now;
		obj.CreationUserId = moduleWorkspace.UserId;

		// HTTP Request
		object? response = null;
		if (e == EForm.Update)
			response = await _service.UpdateAsync(obj, moduleWorkspace.Id);
		else if (e == EForm.Insert)
			response = await _service.InsertAsync(obj, moduleWorkspace.Id);


		if (response is null || response is ErrorResponse)
		{
			var errorText = "Vyskytla se neočekávaná chyba";
			if (response is ErrorResponse error)
				errorText = error.ErrorMessage;
			Messenger.AddError(title: "Chyba při ukladani", message: errorText);
		}
		else
		{
			Messenger.AddInformation(title: "Vše v pořádku", message: "Záznam byl úspěšně uložen.");

			switch (obj)
			{
				case Payment p:
					paymentForm = new();
					paymentFormType = EForm.Insert;
					paymentList.Clear();
					break;
				case RecordAttribute ra:
					attributeForm = new();
					attributeFormType = EForm.Insert;
					attributeList.Clear();
					break;
			}			
			StateHasChanged();

            await Task.Delay(1000);
			Messenger.Clear();
		}
    }
	private async Task DeleteItemClicked<T>(T deleteItem)
    {
  //       ListItems?.Remove(editableCultureInfo);
		// await gridComponent.RefreshDataAsync();
    }

}
