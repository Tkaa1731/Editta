@page "/fetchdata"
@inject HttpClient Http
@inject AuthenticationStateProvider authStateProv
@inject NavigationManager navManager
@inject IJSRuntime js
@attribute [Authorize]

<PageTitle>Weather forecast</PageTitle>
@if (licenseList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        @foreach (var l in licenseList)
        {
            <ul>
                <a @onclick="() => LicenseChoosed(l.LicenseNumber)">@l.NameOfOrganization| @l.LicenseNumber</a>
                @if (choosedLicense == l.LicenseNumber && modulesDic.ContainsKey(choosedLicense))
                {
                    @foreach(var m in modulesDic[choosedLicense])
                    {                        
                        <li><a @onclick="() => GetUsersOfModule(m.Id)">Uživatelé @m.ModuleName</a></li>
                    }
                    <li><a @onclick="GetUsers">Users</a></li>
                }
            </ul>   
        }
    </div>
}
@if(choosedUser is not null)
{
    <UserForm user="@choosedUser" Type="UserForm.FormEnum.Edit"/>
}
else if(choosedModule is not null)
{
    <ModuleForm module="@choosedModule" Type="ModuleForm.FormEnum.Edit"/>
}
<div style="max-height:325px;overflow:auto;">
    <table class="table table-hover">
        <thead class="bg-dark text-white" style="position: sticky; top: 0px;">
            <tr>
 @*               @if (modulesList is not null)
                {
                   <th scope="col">Id</th>
                   <th scope="col">Name</th>
                   <th scope="col">Short name</th>
                }*@
                @if (usersList is not null)
                {
                   <th scope="col">Id</th>
                   <th scope="col">Login</th>
                   <th scope="col">Full name</th>
                   <th scope="col">Email</th>
                }
            </tr>
        </thead>
        <tbody>
@*        
            @if(modulesList is not null)
            {
                @foreach (var i in modulesList)
                {
                    <tr @onclick="()=>ModuleDetail(i.Id)">
                      <th scope="row">@i.Id</th>
                      <td>@i.Name</td>
                      <td>@i.ShortName</td>
                    </tr>      
                }            
            }*@
            @if(usersList is not null)
            {
                @foreach (var i in usersList)
                {
                    <tr @onclick="()=>UserDetail(i.Id)">
                      <th scope="row">@i.Id</th>
                      <td>@i.UserLogin</td>
                      <td>@i.UserName</td>
                      <td>@i.Email</td>
                    </tr>      
                }            
            }
        </tbody>
    </table>
</div>


@code {
    private License[]? licenseList;
    private Dictionary<long, User[]> usersDic { get; set; } = new();
    private Dictionary<long,Module[]> modulesDic { get; set; } = new();
    private long choosedLicense { get; set; } = -1;
    private Module? choosedModule;
    private User? choosedUser;
    private Module[]? modulesList;
    private User[]? usersList;

    protected override async Task OnInitializedAsync()
    {
        //var customAuthStateProv = (CustomAuthenticationStateProvider) authStateProv;
        //var token = await customAuthStateProv.GetToken();
        //if(!string.IsNullOrWhiteSpace(token))
        //{
        //    Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
        licenseList = await Http.GetFromJsonAsync<License[]>("api/License");
        usersDic = new();
        modulesDic = new();
        // }
        //else
        //    navManager.NavigateTo("/login",true);

    }
    private async Task LicenseChoosed(int license)
    {
        choosedLicense = license;
        if (!modulesDic.ContainsKey(license))
        {
            // load modules
            modulesList = await Http.GetFromJsonAsync<Module[]>($"api/Module/ModulesList?licenseNumber={choosedLicense}");//TODO: Proc nefunguji controllers
            if(modulesList is not null)
                modulesDic.Add(license, modulesList);            
        }
        if (!usersDic.ContainsKey(license))
        {     
            //load users
            usersList = await Http.GetFromJsonAsync<User[]>($"api/User/UsersList?licenseNumber={choosedLicense}");
            if(usersList is not null)
                usersDic.Add(license, usersList);
        }
    }
    private void GetUsersOfModule(int moduleId)
    {
        usersList = null;
        choosedModule = null;
        choosedUser = null;

        if (modulesDic is not null && modulesDic.ContainsKey(choosedLicense))
            usersList = usersDic[choosedLicense].Where(u=> u.AccessPermition.Exists(p => p.Id == moduleId)).ToArray();  

    }
    private void GetUsers()
    {
        modulesList = null;
        choosedModule = null;
        choosedUser = null;
        if (usersDic is not null && usersDic.ContainsKey(choosedLicense))
            usersList = usersDic[choosedLicense];
    }
    private void UserDetail(int id)
    {
        choosedModule = null;
        if(usersList is not null)
            choosedUser = usersList.Where(a => a.Id == id).First();
    }
    private void ModuleDetail(int id)
    {
        choosedUser = null;
        if(modulesList is not null)
            choosedModule = modulesList.Where(a => a.Id == id).First();
    }
}
