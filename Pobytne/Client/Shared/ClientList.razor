@inject PobytneService _service
@inject IHxMessengerService Messenger
@inject IHxMessageBoxService MessageBox

<HxListLayout TFilterModel="HxListLayout.NoFilter" CssClass="floating-card">
        <TitleTemplate>
           Počet klientů <HxBadge Color="ThemeColor.Light" TextColor="ThemeColor.Dark" CssClass="ms-1">@listCount</HxBadge>
        </TitleTemplate>
        <SearchTemplate>
        <HxCheckbox @bind-Value="lazyList.Active" @bind-Value:after="gridComponent.RefreshDataAsync" Text="Zobrazit aktivní"/>
        <HxInputText Placeholder="Hledat" Type="InputType.Search" @bind-Value="lazyList.Subfix" @bind-Value:after="gridComponent.RefreshDataAsync"/>
        </SearchTemplate>
        <CommandsTemplate>
            @if(Editable){
                <HxButton Text="Nová položka" Color="ThemeColor.Primary" Icon="BootstrapIcon.PlusLg" OnClick="OnNewItem"/>
            }
        </CommandsTemplate>
    <DataTemplate>
        <HxGrid @ref="gridComponent" 
            TItem="IListItem" 
            Responsive="true" 
            DataProvider="LoadDataItems" 
            SelectedDataItemChanged="OnItemSelect"
            SelectedDataItem="Value" 
            ContentNavigationMode="GridContentNavigationMode.Pagination"
            HeaderRowCssClass="sticky-top"
            PageSize="PageSize">
            <Columns>
                <HxGridColumn HeaderText="Id" ItemTextSelector="@(item => item.Id.ToString())" IsDefaultSortColumn=false/>
                <HxGridColumn HeaderText="Název" ItemTextSelector="@(item => item.Name)" />
                <HxGridColumn HeaderText="Popis" ItemTextSelector="@(item => item.Description)"/>
                <HxGridColumn HeaderText="Poslední úprava" ItemTextSelector="@(item => item.CreationDate.ToString())"/>

				<HxContextMenuGridColumn TItem="IListItem" Context="item">
					@if (Editable)
					{
						<HxButton Icon="@BootstrapIcon.Trash" style="color:red; padding: 0px;" Color="ThemeColor.Link" Tooltip="Smazat" OnClick="async()=>await OnDeleteItem(item)"/>
					}
				</HxContextMenuGridColumn>     
  
            </Columns>
        </HxGrid>
    </DataTemplate>
</HxListLayout>

<FormModal formItem="itemForm" @ref=formModal OnSuccessRequest="OnSuccessRequestHandler"></FormModal>

@code {
	[CascadingParameter]
	private ModuleWorkplace moduleWorkspace { get; set; } = default!;
	[Parameter]
	public bool Editable { get; set; } = true;
	[Parameter]
	public IListItem? Value { get; set; }
	[Parameter]
	public EventCallback<IListItem?> ValueChanged { get; set; }
	[Parameter]
	public int PageSize { get; set; } = 10;

	private FormModal formModal = default!;
	private HxGrid<IListItem> gridComponent = new();
	private LazyList lazyList = new(typeof(Client));

	private IListItem itemForm = default!;

	private List<Client> list = [];
	private int listCount = 0;

	private async  Task<GridDataProviderResult<IListItem>> LoadDataItems(GridDataProviderRequest<IListItem> request)
	{
		lazyList.StartIndex = request.StartIndex;
		lazyList.Count = request.Count??int.MaxValue;

		Value = null;

		await OnFilteredCount();
		await OnLoadMore();

		return new GridDataProviderResult<IListItem>()
			{
				Data = list,
				TotalCount = listCount
			};
	}
	private async Task OnLoadMore()
	{
		var response = await _service.GetAllAsync<Client>($"?moduleId={moduleWorkspace.Id}&", moduleWorkspace.Id, lazyList);
		if (response is List<Client> clients)
			list = clients;
		else
		{
			list.Clear();
			var errorMessage = "Nastala neočekávaná chyba.";
			if (response is ErrorResponse error)
				errorMessage = error.ErrorMessage;
			Messenger.AddError(title: "Chyba při smazáni", message: errorMessage);
		}
	}
	private async Task OnFilteredCount()
	{
		var response = await _service.GetCountAsync<Client>($"?moduleId={moduleWorkspace.Id}&", moduleWorkspace.Id, lazyList);
		if (response is int count)
		{
			listCount = count;
			StateHasChanged();
		}
		else
		{
			listCount = 0;
			var errorMessage = "Nastala neočekávaná chyba.";
			if (response is ErrorResponse error)
				errorMessage = error.ErrorMessage;
			Messenger.AddError(title: "Chyba při smazáni", message: errorMessage);
		}
	}
	private async Task OnItemSelect(IListItem selection)
	{
		Value = selection;
		await ValueChanged.InvokeAsync(selection);
		if (Editable)
		{
			itemForm = (IListItem)selection.Clone();
			await formModal.UpdateForm();
		}
	}
	private async Task OnNewItem()
	{
		itemForm = new Client()
			{
				ModuleId = moduleWorkspace.Id,
				Valid = true,
			};
		Value = null;
		await formModal.InsertForm();
	}
	private void OnSuccessRequestHandler((IListItem,EForm) item)
	{
		//UPATE LIST
		if(item.Item1 is Client c)
		{			
			switch (item.Item2)
			{
				case EForm.Insert:
					list.Add(c);
					break;
				case EForm.Update:
					var index = list.FindIndex(i => i.Id == c.Id);
					if(index != -1)
					{
						list[index] = c;
						Value = null;
					}
					break;
			}
			StateHasChanged();
		}
	}
	private async Task OnDeleteItem(IListItem deleteItem)
    {
        var deleteMessage = await MessageBox.ShowAsync("Smazat položku",$"Opravdu chcete smazat položku: {deleteItem.Name}", MessageBoxButtons.YesNo);
        if (deleteMessage == MessageBoxButtons.No)
            return;

        var response = await _service.DeleteAsync<Client>(deleteItem.Id, moduleWorkspace.Id);

        if(response is ErrorResponse error)
            Messenger.AddError(title: "Chyba při smazáni", message: error.ErrorMessage );
        else
        {
            list.Remove((Client)deleteItem);
            Messenger.AddInformation(title: "Vše v pořádku", message: "Záznam byl úspěšně smazán.");
			await Task.Delay(1500);
			Messenger.Clear();
        }
    }
}
