@using System.ComponentModel.DataAnnotations;

@if(payment is not null)
{
    <EditForm Model="@payment" OnValidSubmit=OnValidSubmitHandler>
	    <DataAnnotationsValidator />
		<div class="mx-3 mt-3">
			<div class="row">
				<div class="col">
					<HxInputText @bind-Value="payment.Name" Label="Náezev dokladu" Type="InputType.Text" ValidationMessageMode="ValidationMessageMode.Regular"/>
				</div>
				<div class="col">
                    <HxSelect TItem="RKeyValue"
                              TValue="int"
                              Label="Typ platby"
                              Data="paymentTypeList"
                              @bind-Value="selectedType"
                              TextSelector="@(r => r.Name)"
                              ValueSelector="@(r => r.Id)"/>
				</div>
			</div>
			<div class="row">
				<div class="col-3">
					<HxInputText @bind-Value="payment.InvoicePrefix" Label="Prefix dokladu" ValidationMessageMode="ValidationMessageMode.Regular"/>
				</div>
                <div class="col"/>
				<div class="col-3">
					<HxInputNumber @bind-Value="payment.InvoiceNumber" Label="Číslo dokladu" ValidationMessageMode="ValidationMessageMode.Regular"/>
				</div>
			</div>
			<div class="row">
                <div class="col">
                    <HxInputDate CalendarIcon="BootstrapIcon.Calendar" @bind-Value="payment.ValidFrom" Label="Platní od" ValidationMessageMode="ValidationMessageMode.Regular" />
                </div>
                <div class="col">
                    <HxInputDate CalendarIcon="BootstrapIcon.Calendar" @bind-Value="payment.ValidTo" MinDate="payment.ValidFrom.AddDays(1)" Label="Platí do" ValidationMessageMode="ValidationMessageMode.Regular" />
                </div>
            </div>
            @if (formType == EForm.Update)
            {
             <div class="mt-2 text-end" style="font-size:smaller;"><b>Poslední úprava:</b> @payment.CreationUserName  @payment.CreationDate.ToShortDateString()</div>   
            }
        </div>

        <div class="d-grid gap-2">
            <HxSubmit Color="ThemeColor.Success">@ButtonText</HxSubmit>
        </div>

    </EditForm>
}

@code {
    [EditorRequired]
    [Parameter]
    public Payment payment { get; set; } = new();
    [EditorRequired]
    [Parameter]
    public EForm formType { get; set; }
    [EditorRequired]
    [Parameter]
    public EventCallback<EForm> OnValidSubmit{ get; set; }
    private string ButtonText
    {
        get
        {
            if (formType == EForm.Insert) return "Vložit";
            return "Aktualizovat";
        }
    }
    private List<RKeyValue> paymentTypeList = [];
    private int selectedType
    {
        get => (int)payment.Type;
        set { payment.Type = (EPaymentType)value; }
    }
    protected override void OnInitialized()
    {
        foreach (EPaymentType pt in Enum.GetValues(typeof(EPaymentType)))
        {
            var field = pt.GetType().GetField(pt.ToString());
            var displayAttribute = (DisplayAttribute)Attribute.GetCustomAttribute(field!, typeof(DisplayAttribute))!;
            var name = displayAttribute?.Name ?? pt.ToString();

            paymentTypeList.Add(new RKeyValue() { Name = name, Id = (int)pt });
        }
        base.OnInitialized();
    }
    private async Task OnValidSubmitHandler() => await OnValidSubmit.InvokeAsync(formType);

}
