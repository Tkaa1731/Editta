@using System.ComponentModel.DataAnnotations;
@inject HttpClient httpClient
@inject IJSRuntime js

@if(user is not null)
{
    <EditForm Model="@user" OnValidSubmit=OnValidSubmitHandler>
	    <DataAnnotationsValidator />

        <div class="row align-items-start">
            <div class="col">
                <HxInputText @bind-Value="user.UserLogin" Label="Login user" Type="InputType.Text"/>
            </div>
            <div class="col">
                <HxInputText @bind-Value="user.UserName" Label="Name user" Type="InputType.Text" />
            </div>
        </div>
        <div class="row align-items-start">
            <div class="col">
                <HxInputText @bind-Value="user.Email" Label="Email" Type="InputType.Email" />
            </div>
            <div class="col">
                <HxInputText @bind-Value="user.PhoneNumber" Label="Phone number" Type="InputType.Tel" />
            </div>
        </div>
        <div class="row align-items-start">
		    <div class="col">		
                <HxInputNumber Label="License Number" CssClass="mb-3" Decimals="0" TValue="int" @bind-Value="user.LicenseNumber" Enabled="false" />
            </div>
		    <div class="col">
                <HxInputDate CalendarIcon="BootstrapIcon.Calendar" @bind-Value="user.ValidTo" MinDate=DateTime.Now.AddDays(1) Label="Valid To" />
            </div>
        </div>

        <HxSwitch Text="Valid user" @bind-Value="user.Valid" />

        <div class="d-grid gap-2">
            <HxSubmit Color="ThemeColor.Success">@ButtonText</HxSubmit>
        </div>

    </EditForm>
}

@code {
    [EditorRequired]
    [Parameter]
    public User? user { get; set; }
    [EditorRequired]
    [Parameter]
    public FormEnum formType { get; set; }
    [EditorRequired]
    [Parameter]
    public EventCallback<FormEnum> OnValidSubmit{ get; set; }
    private string ButtonText
    {
        get
        {
            if(formType == FormEnum.Insert) return "Insert";
            return "Update";
        }
    }
    private async Task OnValidSubmitHandler() => await OnValidSubmit.InvokeAsync(formType);

}
