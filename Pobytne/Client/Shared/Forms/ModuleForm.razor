@if(moduleCopy is not null && module is not null)
{
    <EditForm Model="@moduleCopy" OnValidSubmit=OnValidSubmitHandler>
        <DataAnnotationsValidator />

        <div class="row align-items-start">
            <div class="col">
                <HxInputText @bind-Value="moduleCopy.ModuleName" Label="Name of module" Type="InputType.Text" InputCssClass=@((module.ModuleName!= moduleCopy.ModuleName)?"input_changed":"")/>
            </div>
            <div class="col">
                <HxInputText @bind-Value="moduleCopy.ModuleShortName" Label="ShortName" Type="InputType.Text" />
            </div>
        </div>
        <div class="row align-items-start">
            <div class="col">
                <HxInputNumber Label="License Number" CssClass="mb-3" Decimals="0" TValue="int" @bind-Value="moduleCopy.LicenseNumber" Enabled="false" />
            </div>
            <div class="col">
                <HxInputNumber Label="Evidence type" CssClass="mb-3" Decimals="0" TValue="int" @bind-Value="moduleCopy.EvidenceType"/>
            </div>
        </div>

        <HxSwitch Text="Only users by ID of module" @bind-Value="@moduleCopy.OnlyUsersByIdOfModule" />

        <div class="d-grid gap-2">
            <HxSubmit Color="ThemeColor.Success">@ButtonText</HxSubmit>
        </div>

    </EditForm>
}

@code {//TODO: ymena barvy pri zmene, pred updatem kontrola zmen
    [EditorRequired]
    [Parameter]
    public Module? module { get; set; }
    private Module? moduleCopy;
    [EditorRequired]
    [Parameter]
    public FormEnum formType { get; set; }
    [EditorRequired]
    [Parameter]
    public EventCallback<FormEnum> OnValidSubmit { get; set; }
    private string ButtonText
    {
        get
        {
            if (formType == FormEnum.Insert) return "Insert";
            return "Update";
        }
    }
    private async Task OnValidSubmitHandler() => await OnValidSubmit.InvokeAsync(formType);
    protected override void OnInitialized()
    {
        if(module is not null)
            moduleCopy = module.Clone() as Module;
    }
}
