@if(module is not null)
{
    <EditForm Model="@module" OnValidSubmit=OnValidSubmitHandler>
	    <DataAnnotationsValidator />

        <div class="row align-items-start">
            <div class="col">
                <HxInputText @bind-Value="module.ModuleName" Label="Name of module" Type="InputType.Text" />
            </div>
            <div class="col">
                <HxInputText @bind-Value="module.ModuleShortName" Label="ShortName" Type="InputType.Text" />
            </div>
        </div>
        <div class="row align-items-start">
            <div class="col">
                <HxInputNumber Label="License Number" CssClass="mb-3" Decimals="0" TValue="int" @bind-Value="module.LicenseNumber" Enabled="false" />
            </div>
            <div class="col">
                <HxInputNumber Label="Evidence type" CssClass="mb-3" Decimals="0" TValue="int" @bind-Value="module.EvidenceType"/>
            </div>
        </div>

        <HxSwitch Text="Only users by ID of module" @bind-Value="@module.OnlyUsersByIdOfModule" />

        <div class="d-grid gap-2">
            <HxSubmit Color="ThemeColor.Success">@ButtonText</HxSubmit>
        </div>

    </EditForm>
}

@code {
    [EditorRequired]
    [Parameter]
    public Module? module { get; set; }
    [EditorRequired]
    [Parameter]
    public FormEnum formType { get; set; }
    [EditorRequired]
    [Parameter]
    public EventCallback<string> OnValidSubmit { get; set; }
    private string ButtonText
    {
        get
        {
            if (formType == FormEnum.Insert) return "Insert";
            return "Update";
        }
    }
    private async Task OnValidSubmitHandler()
    {
        if (formType == FormEnum.Insert)
            await OnValidSubmit.InvokeAsync("Insert");
        else if (formType == FormEnum.Update)
            await OnValidSubmit.InvokeAsync("Update");
    }
}
