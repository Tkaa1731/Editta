
<EditForm Model="@module">
    <DataAnnotationsValidator />
    <div class="mx-3 mt-3">
        <div class="row">
            <div class="col">
                <HxInputText @bind-Value="module.ModuleName" Label="Název modulu" Type="InputType.Text" ValidationMessageMode="ValidationMessageMode.Regular" MaxLength="50"/>
            </div>
            <div class="col">
                <HxInputText @bind-Value="module.ModuleShortName" Label="Zkrácený název" Type="InputType.Text" ValidationMessageMode="ValidationMessageMode.Regular" MaxLength="15"/>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <HxInputNumber Label="Číslo licence" CssClass="mb-3" Decimals="0" TValue="int" @bind-Value="module.LicenseNumber" Enabled="false" />
            </div>
            <div class="col"/>
            <div class="col">
                <HxSelect TItem="RKeyValue"
                          TValue="int"
                          Label="Typ evidence"
                          Data="evidenceTypeList"
                          @bind-Value="selectedType"
                          TextSelector="@(et => et.Name)"
                          ValueSelector="@(et => et.Id)" />
            </div>
        </div>
        <div class="my-2">
            <HxSwitch Text="Zobrazit pouze uživatele modulu" @bind-Value="@module.OnlyUsersByIdOfModule" />
        </div>

	</div>
    <div class="d-grid gap-2">
    <AuthorizeView Policy="PermitionPolicy" Resource=(EPermition.Module,EAccess.FullAccess,moduleWorkspace.ModuleId)>
        <Authorized Context="auth_context">
            <HxSubmit Color="ThemeColor.Success" OnValidClick="OnValidSubmitHandler">@ButtonText</HxSubmit>
        </Authorized>
        <NotAuthorized Context="auth_context">
            <HxSubmit Color="ThemeColor.Success" Enabled=false>@ButtonText</HxSubmit>
        </NotAuthorized>
    </AuthorizeView>
    </div>

</EditForm>


@code {
    [CascadingParameter]
    private ModuleWorkplace moduleWorkspace { get; set; } = default!;
    [EditorRequired]
    [Parameter]
    public Module module { get; set; } = default!;
    [EditorRequired]
    [Parameter]
    public EForm formType { get; set; }
    [EditorRequired]
    [Parameter]
    public EventCallback<EForm> OnValidSubmit { get; set; }
    private string ButtonText
    {
        get
        {
            if (formType == EForm.Insert) return "Vložit";
            return "Aktualizovat";
        }
    }
    private List<RKeyValue> evidenceTypeList = [];
    private int selectedType 
    { 
        get => (int)module.EvidenceType; 
        set { module.EvidenceType = (EEvidenceType)value; } 
    }
    protected override void OnInitialized()
    {
        foreach (EEvidenceType et in Enum.GetValues(typeof(EEvidenceType)))
        {
            var field = et.GetType().GetField(et.ToString());
            var displayAttribute = (DisplayAttribute)Attribute.GetCustomAttribute(field!, typeof(DisplayAttribute))!;
            var name = displayAttribute?.Name ?? et.ToString();

            evidenceTypeList.Add(new RKeyValue() { Name = name, Id = (int)et });
        }
        base.OnInitialized();
    }
    private async Task OnValidSubmitHandler() => await OnValidSubmit.InvokeAsync(formType);

}
