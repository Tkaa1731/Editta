@if(module is not null)
{
    <EditForm Model="@module" OnValidSubmit=OnValidSubmitHandler>
        <DataAnnotationsValidator />
        <div class="mx-3 mt-3">
            <div class="row">
                <div class="col">
                    <HxInputText @bind-Value="module.ModuleName" Label="Název modulu" Type="InputType.Text" ValidationMessageMode="ValidationMessageMode.Regular" />
                </div>
                <div class="col">
                    <HxInputText @bind-Value="module.ModuleShortName" Label="Zkrácený název" Type="InputType.Text" ValidationMessageMode="ValidationMessageMode.Regular" />
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <HxInputNumber Label="Číslo licence" CssClass="mb-3" Decimals="0" TValue="int" @bind-Value="module.LicenseNumber" Enabled="false" />
                </div>
                <div class="col"/>
                <div class="col-3">
                    <HxInputNumber Label="Typ evidence" CssClass="mb-3" Decimals="0" TValue="int" @bind-Value="module.EvidenceType" ValidationMessageMode="ValidationMessageMode.Regular" />
                </div>
            </div>
            <div class="my-2">
                <HxSwitch Text="Zobrazit pouze uživatele modulu" @bind-Value="@module.OnlyUsersByIdOfModule" />
            </div>

		</div>
        <div class="d-grid gap-2">
            <HxSubmit Color="ThemeColor.Success">@ButtonText</HxSubmit>
        </div>

    </EditForm>
}

@code {
    [EditorRequired]
    [Parameter]
    public Module? module { get; set; }
    [EditorRequired]
    [Parameter]
    public EForm formType { get; set; }
    [EditorRequired]
    [Parameter]
    public EventCallback<EForm> OnValidSubmit { get; set; }
    private string ButtonText
    {
        get
        {
            if (formType == EForm.Insert) return "Vložit";
            return "Aktualizovat";
        }
    }
    private async Task OnValidSubmitHandler()
    {
        if(module is not null)
        {    
           await OnValidSubmit.InvokeAsync(formType);
        }
    }

}
