@inject IJSRuntime js
@inject PobytneService service

@if(permition is not null && _editContext is not null)
{
    <EditForm EditContext="_editContext" OnValidSubmit="OnValidSubmitHandler">
    <DataAnnotationsValidator/>
        <div class="mx-3">
            <HxSelect TItem="UserRecord"
                                  TValue="int?"
                                  Label="Uživatel"
                                  Data="userList"
                        @bind-Value="model.userId"
                                  TextSelector="@(u => u.userName)"
                                  ValueSelector="@(u => u.id)"
                                  Nullable="true"
                                  NullText="-Vyber uživatele-"
                                  NullDataText="Načítám data..." 
                                  Enabled="formType == EForm.Insert" 
                                  />
            <div class="my-3">        
                <PinForm @bind-Value="model.permitionString">
                    <ValidationMessage>
                        <HxValidationMessage For="() => model.permitionString" Mode="ValidationMessageMode.Regular"/>
                    </ValidationMessage>
                </PinForm>
            </div>
        </div>
    </EditForm>
    <HxSubmit Color="ThemeColor.Success" CssClass="w-100 mt-3" EditContext="@_editContext" OnValidClick="OnValidSubmitHandler" >@ButtonText</HxSubmit>
  

}

@code {

    [EditorRequired]
    [Parameter]
    public EForm formType { get; set; }
    [EditorRequired]
    [Parameter]
    public EventCallback<EForm> OnValidSubmit { get; set; }
    [EditorRequired]
    [Parameter]
    public Permition? permition{ get; set; }

    private UserModel model = new();
    private EditContext? _editContext;
    private List<UserRecord> userList = new(); 
    private string ButtonText
    {
        get
        {
            if (formType == EForm.Insert) return "Vložit";
            return "Aktualizovat";
        }
    }
    private record UserRecord(string userName,int id);
    private class UserModel
    {
        [Required(ErrorMessage = "Zvolte uživatele")]
        public int? userId { get; set; } = default!;
        [MinLength(50,ErrorMessage ="Vyplňte všechna oprávnění")]
        public string permitionString { get; set; } = string.Empty;
    }

    private async Task OnValidSubmitHandler()
    {
        if(permition is not null && model.userId.HasValue)
        {
            permition.UserId = model.userId.Value;
            permition.PermitionString = model.permitionString;
            permition.ValidFrom = DateTime.Today;
            permition.ValidTo = DateTime.Today.AddYears(5);
        }

        await OnValidSubmit.InvokeAsync(formType);


    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (permition is not null && firstRender)
        {
           _editContext = new(model);
            if (permition.UserId > 0)
                await LoadUsers(permition.UserId);
            else
                await LoadUsers();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    private async Task LoadUsers(int id = -1)
    {
        if(permition is not null)
        {
            userList.Clear();

            if (id > 0)
            {
                var response = await service.GetByIdAsync<User>(id, -1);

		        if (response is null)
			        Console.WriteLine($"NO RESPONSE");
		        else if (response is ErrorResponse response1)
			        Console.WriteLine($"{response1.ErrorMessage}");
		        else if (response is User u)
		        {
                    userList.Add(new UserRecord(u.UserName, u.Id));

                    model.permitionString = permition.PermitionString;
                    model.userId = id;
		        }
            }
            else
            {   
                int module = permition.ModuleId;
                var response =  await service.GetAllAsync<User>($"GetRest?moduleId={module}", -1);

		        if (response is null)
			        Console.WriteLine($"NO RESPONSE");
		        else if (response is ErrorResponse response1)
			        Console.WriteLine($"{response1.ErrorMessage}");
		        else if (response is List<User> list)
		        {
                    foreach (var u in list)
                    {
                        userList.Add(new UserRecord(u.UserName,u.Id));
                    }     
		        }
            }
            StateHasChanged();
        }
    }
}
