@inject IJSRuntime js
@inject PobytneService service

@if(_editContext is not null)
{
    <EditForm EditContext="_editContext">
    <DataAnnotationsValidator/>
        <div class="mx-3">
            <HxSelect TItem="RKeyValue"
                                  TValue="int?"
                                  Label="Uživatel"
                                  Data="userList"
                        @bind-Value="permition.UserId"
                                  TextSelector="@(u => u.Name)"
                                  ValueSelector="@(u => u.NId)"
                                  Nullable="true"
                                  NullText="-Vyber uživatele-"
                                  NullDataText="Načítám data..." 
                                  Enabled="formType == EForm.Insert" 
                                  />
            <div class="my-3">        
                <PinForm @bind-Value="permition.PermitionString">
                    <ValidationMessage>
                        <HxValidationMessage For="() => permition.PermitionString" Mode="ValidationMessageMode.Regular"/>
                    </ValidationMessage>
                </PinForm>
            </div>
            <div class="row">
                <div class="col">
                    <HxInputDate CalendarIcon="BootstrapIcon.Calendar" @bind-Value="permition.ValidFrom" Label="Platí od" ValidationMessageMode="ValidationMessageMode.Regular"/>
                </div>
                <div class="col">
                    <HxInputDate CalendarIcon="BootstrapIcon.Calendar" @bind-Value="permition.ValidTo" Label="Platí do" MinDate="permition.ValidFrom.AddDays(1)" ValidationMessageMode="ValidationMessageMode.Regular"/>
                </div>
            </div>
        </div>
    </EditForm>
    <AuthorizeView Policy="PermitionPolicy" Resource=(EPermition.Permition,EAccess.FullAccess,moduleWorkspace.ModuleId)>
    <Authorized>
        <HxSubmit Color="ThemeColor.Success" CssClass="w-100 mt-3" EditContext="@_editContext" OnValidClick="OnValidSubmitHandler" >@ButtonText</HxSubmit>
    </Authorized>
    <NotAuthorized>
        <HxSubmit Color="ThemeColor.Success" CssClass="w-100 mt-3" Enabled="false">@ButtonText</HxSubmit>
    </NotAuthorized>
    </AuthorizeView>
  

}

@code {
    [CascadingParameter]
    private ModuleWorkplace moduleWorkspace { get; set; } = default!;
    [EditorRequired]
    [Parameter]
    public Permition permition { get; set; } = default!;
    [EditorRequired]
    [Parameter]
    public EForm formType { get; set; }
    [EditorRequired]
    [Parameter]
    public EventCallback<EForm> OnValidSubmit { get; set; }

    private EditContext? _editContext;
    private List<RKeyValue> userList = new(); 
    private string ButtonText
    {
        get
        {
            if (formType == EForm.Insert) return "Vložit";
            return "Aktualizovat";
        }
    }
    private record UserRecord(string userName,int? id);

    private async Task OnValidSubmitHandler() => await OnValidSubmit.InvokeAsync(formType);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (permition is not null && firstRender)
        {
            _editContext = new(permition);
            if (permition.UserId > 0)
                await LoadUsers(permition.UserId.Value);
            else
                await LoadUsers();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    private async Task LoadUsers(int id = -1)
    {
        if(permition is not null)
        {
            userList.Clear();

            if (id > 0)
                userList.Add(new() { Name = permition.UserName, NId = permition.UserId});

            else
            {   
                int module = permition.ModuleId;
                var response =  await service.GetAllAsync<User>($"?moduleId={module}", -1);

                if (response is null)
                    Console.WriteLine($"NO RESPONSE");
                else if (response is ErrorResponse response1)
                    Console.WriteLine($"{response1.ErrorMessage}");
                else if (response is List<User> list)
                {
                    foreach (var u in list)
                    {
                        userList.Add(new(){ Name = u.UserName, Id = u.Id});
                }     
		        }
            }
            StateHasChanged();
        }
    }
}
