@inject AuthenticationService service

<div style="position: fixed; bottom: 0; right: 0; z-index: 1500;">
	<div class="m-5 dark @Rounded" style="display: flex; flex-direction: row;" @onmouseenter="()=>OnMouseEvent(false)" @onmouseleave="()=>OnMouseEvent(true)">
        <div class="p-2" style="width:58px; display:flex; justify-content:center; " >
            <HxIcon Icon="BootstrapIcon.Stopwatch" CssClass="fs-3"/>
        </div>
        <div class="collapse collapse-horizontal @Show p-2" id="timerCollapse">
            <span class="m-5 fs-3" style="color:@color">@((ExpiresIn.TotalSeconds > 0)?ExpiresIn.ToString("hh':'mm':'ss"):"00:00:00")</span>
        </div>
    </div>
</div>
<style>
    div.dark{
        background-color: #0a1725;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        color: white;
    }
</style>
@code {
    private System.Threading.Timer? timer;
    private TimeSpan ExpiresIn;
    private bool Collapsed = true;
    private string Show
    {
        get
        {
            if (Collapsed) return "";
            return "show";
        }
    }
    private string Rounded
    {
        get
        {
            if (Collapsed) return "rounded-circle";
            return "rounded-pill";
        }
    }
    private string color
    {
        get
        {
            if (ExpiresIn.TotalSeconds <= 10) return "red";
            return "#fff";
        }
    }
    private void OnMouseEvent(bool collapse)
    {
        Collapsed = collapse;

        if(collapse)
            timer?.Change(Timeout.Infinite, Timeout.Infinite);
        else
            timer?.Change(0, 1000);

        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        ExpiresIn = await service.ExpiresIn();

        timer = new System.Threading.Timer(async (object? stateInfo) =>
        {
            ExpiresIn = await service.ExpiresIn();
            StateHasChanged();
        }, new System.Threading.AutoResetEvent(false), 0, 1000); // fire every 1000 milliseconds
    }
}
