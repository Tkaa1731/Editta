@inject IJSRuntime js
@inject PobytneService service

<HxModal @ref="myModal" Backdrop="ModalBackdrop.Static" Size="ModalSize.Large" OnClosed="HandleHideClick">
    <HeaderTemplate>
        <h2 class=@headerStyle>@headerText</h2>
    </HeaderTemplate>
    <BodyTemplate>
        @if (formType == EForm.Update && formItem is not null)
        {
         <div class="mb-2 text-end" style="font-size:smaller;"><b>Poslední úprava:</b> @formItem.CreationUserName  @formItem.CreationDate.ToShortDateString()</div>   
        }
        @switch (formItem)
        {
            case User user:
                 <UserForm user="user" formType=formType OnValidSubmit="Request" ></UserForm>
                 break;
            case Permition permition:
                <PermitionForm permition="permition" formType="formType" OnValidSubmit="Request"></PermitionForm>
                break;
            case Module module:
                <ModuleForm module="module" formType=formType OnValidSubmit="Request"></ModuleForm>
                break;
            case License license:
                <LicenseForm license="license" formType=formType OnValidSubmit="Request"></LicenseForm>
                break;
            case Client client:
                <ClientForm client="client" formType="formType" OnValidSubmit="Request"/>
                break;
            case Record record:
                <RecordTabPanelForm record="record" formType="formType" OnValidSubmit="Request"/>
                break;
        }
    </BodyTemplate>
</HxModal>

@code
{
    [CascadingParameter]
    private ModuleWorkplace moduleWorkspace { get; set; } = default!;

    [Parameter]
    public EventCallback OnSuccessRequest{ get; set; }
    [Parameter]
    [EditorRequired]
    public required IListItem formItem{ get; set; }
    private EForm formType;

    public HxModal myModal = new();

    private string headerText = "";
    private string headerStyle = "";

    public async Task UpdateForm()
    {
        var t = formItem;
        formType = EForm.Update;
        await myModal.ShowAsync();
    }
    public async Task InsertForm()
    {
        var t = formItem;
        formType = EForm.Insert;
        await myModal.ShowAsync();
    }
    private async Task HandleHideClick()
    {
        headerText = "";
        headerStyle = "";
        await myModal.HideAsync();
    }

    private async Task  CompleteReq<T>(EForm e,T obj)
    {
        object? response = null;
        if(e == EForm.Update)
            response = await service.UpdateAsync(obj, moduleWorkspace.Id);
        else if(e == EForm.Insert)
            response = await service.InsertAsync(obj, moduleWorkspace.Id);

        if (response is null || response is ErrorResponse)
        {
            headerText = "FAIL";
            //ERROR occured
        }
        else
        {
            headerText = "SUCCESS";
            headerStyle = "text-success";
            await OnSuccessRequest.InvokeAsync();       
            //TODO: Set parameter only if request is success
        }
        StateHasChanged();// rerender componennt
        return;

    }
    private async Task Request(EForm request)
    {
        if(formItem is not null)
        {   
            headerStyle = "text-danger";
            // ACreation
            formItem.CreationDate = DateTime.Now;
            formItem.CreationUserId = moduleWorkspace.UserId;

            switch (formItem)
            {
                case User user:
                    await CompleteReq(request, user);
                    break;
                case Permition permition:
                    await CompleteReq(request,permition);
                    break;
                case Module module:
                    await CompleteReq(request, module);
                    break;
                case License license:
                    await CompleteReq(request, license);
                    break;
                case Client client:
                    await CompleteReq(request, client);
                    break;
                case Record record:
                    await CompleteReq(request, record);
                    break;
                default:
                    await js.InvokeVoidAsync("alert", "neni implementovano");
                    break;
            }

            await Task.Delay(1000);

            await HandleHideClick();
        }
    }
}