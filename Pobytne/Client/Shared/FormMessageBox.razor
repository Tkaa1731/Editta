@inject IJSRuntime js
@inject PobytneService service


<HxModal @ref="myModal" Backdrop="ModalBackdrop.Static" Size="ModalSize.Large" OnClosed="HandleHideClick">
    <HeaderTemplate><h2 class=@headerStyle>@headerText</h2></HeaderTemplate>
    <BodyTemplate>
        @switch (formItem)
        {
            case User user:
                @if(user.AccessPermition is null)
                {
                    <UserForm user=user formType=formType OnValidSubmit="Request" ></UserForm>
                    break;
                }
                <PermitionForm permition="user.AccessPermition.First()" formType="formType" OnValidSubmit="Request"></PermitionForm>
                break;
            case Module module:
                <ModuleForm module=module formType=formType OnValidSubmit="Request"></ModuleForm>
                break;
            case License license:
                <LicenseForm license=license formType=formType OnValidSubmit="Request"></LicenseForm>
                break;
        }
    </BodyTemplate>
</HxModal>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; } = default!;
    [Parameter]
    public EventCallback OnSuccessRequest{ get; set; }
    [Parameter]
    [EditorRequired]
    public IListItem? formItem{ get; set; }
    private FormEnum formType;

    public HxModal myModal = new();

    private string headerText = "";
    private string headerStyle = "";

    public async Task UpdateForm()
    {
        formType = FormEnum.Update;
        await myModal.ShowAsync();
    }
    public async Task InsertForm()
    {
        formType = FormEnum.Insert;
        await myModal.ShowAsync();
    }
    private async Task HandleHideClick()
    {
        headerText = "";
        headerStyle = "";
        await myModal.HideAsync();
    }
    private async Task GetAuthor()
    {
        var authState = await authenticationState;
        if (authState.User.Identity is not null && authState.User.Identity.IsAuthenticated && formItem is not null)
        {
            formItem.CreationDate = DateTime.Now;
            ClaimsPrincipal cp = authState.User;
            string? id = cp.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Sid)?.Value;
            if (id is not null)
                formItem.CreationUserId = Int32.Parse(id); 
            else
                Console.WriteLine("PRBLEM WITH AUTHORIZATION");
        }
    }
    private async Task  CompleteReq<T>(FormEnum e,T obj)
    {
        object? response = null;
        if(e == FormEnum.Update)
            response = await service.UpdateAsync(obj);
        else if(e == FormEnum.Insert)
            response = await service.InsertAsync(obj);

        if (response is null || response is ErrorResponse)
        {
            headerText = "FAIL";
            //ERROR occured
        }
        else
        {
            headerText = "SUCCESS";
            headerStyle = "text-success";
            await OnSuccessRequest.InvokeAsync();            
        }
        StateHasChanged();// rerender componennt
        return;

    }
    private async Task Request(FormEnum request)
    {
        if(formItem is not null)
        {   
            headerStyle = "text-danger";
            await GetAuthor();

            switch (formItem)
            {
                case User user:
                    if (user.AccessPermition is null)
                        await CompleteReq(request, user);
                    else
                        await CompleteReq(request, user.AccessPermition.First());// je jenom jedna, jedna konkretniho modulu
                    break;
                case Module module:
                    await CompleteReq(request, module);
                    break;
                case License license:
                    await CompleteReq(request, license);
                    break;
                default:
                    await js.InvokeVoidAsync("alert", "neni implementovano");
                    break;
            }

            await Task.Delay(1000);

            await HandleHideClick();
        }
    }
//TODO: pri failu obnovit hodnoty // kopie?
}