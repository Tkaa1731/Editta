@inject PobytneService _service

<HxListLayout TFilterModel="HxListLayout.NoFilter" CssClass="floating-card">
        <TitleTemplate>
            @ListTitle <HxBadge Color="ThemeColor.Light" TextColor="ThemeColor.Dark" CssClass="ms-1">@ListItems?.Count</HxBadge>
        </TitleTemplate>
        <SearchTemplate>
        <HxCheckbox @bind-Value="ShowActive" @bind-Value:after="gridComponent.RefreshDataAsync" Text="Zobrazit pouze aktivní" Enabled="ListItems is not null"/>
        <HxInputText Placeholder="Hledat" Type="InputType.Search" @bind-Value="SearchText" @bind-Value:after="gridComponent.RefreshDataAsync" Enabled="ListItems is not null" />
        </SearchTemplate>
        <CommandsTemplate>
            @if(Editable){
                <HxButton Text="Nová položka" Color="ThemeColor.Primary" Icon="BootstrapIcon.PlusLg" OnClick="NewItemClicked" Enabled="ListItems is not null" />
            }
        </CommandsTemplate>
    @* TODO:Infinite scroll LAZY-LOADING *@
    <DataTemplate>
        <HxGrid @ref="gridComponent" 
            TItem="IListItem" 
            Responsive="true" 
            DataProvider="LoadDataItems" 
            SelectedDataItemChanged="HandleSelectedDataItemChanged"
            SelectedDataItem="selectedItem" 
            ContentNavigationMode="GridContentNavigationMode.Pagination"
            HeaderRowCssClass="sticky-top"
            PageSize="PageSize">
            <Columns>
                <HxGridColumn HeaderText="Id" ItemTextSelector="@(item => item.Id.ToString())" IsDefaultSortColumn=false/>
                <HxGridColumn HeaderText="Název" ItemTextSelector="@(item => item.Name)" />
                <HxGridColumn HeaderText="Popis" ItemTextSelector="@(item => item.Description)"/>
                <HxGridColumn HeaderText="Poslední úprava" ItemTextSelector="@(item => item.CreationDate.ToString())"/>

                @MenuGridColumn                
  
            </Columns>
        </HxGrid>
    </DataTemplate>
</HxListLayout>
@code {
    [Parameter]
    public RenderFragment? MenuGridColumn { get; set; }
    [Parameter]
    [EditorRequired]
    public List<IListItem>? ListItems 
    {
        get
        {
            if(ShowActive)
                return listItems?.Where(l => l.Active).ToList();
            return listItems;
        }
        set
        {
            listItems = value;
            SearchText = "";
        } 
    }
    private List<IListItem>? listItems;
    [Parameter]
    public IListItem? selectedItem { get; set; }
    private HxGrid<IListItem> gridComponent = new();
    [Parameter]
    public EventCallback<IListItem?> selectedItemChanged { get; set; }
    [Parameter]
    public EventCallback EventNewItem{ get; set; }
    [Parameter]
    public bool Editable { get; set; } = true;
    [Parameter]
    public int PageSize { get; set; } = 15;
    [Parameter]
    public bool LazyLoading { get; set; } = false;
    [Parameter]
    public EventCallback<(int,int)> LoadMore { get; set; }
    [Parameter]
    public int TotalCount {get;set;}
    [Parameter]
    [EditorRequired]
    public required string ListTitle{ get; set; } 

    private bool ShowActive = false;
    private string SearchText = string.Empty;

    private  Task<GridDataProviderResult<IListItem>> LoadDataItems(GridDataProviderRequest<IListItem> request)
    {
        IEnumerable<IListItem>? result = ListItems?.Where(c => c.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase)).ToList();

        return Task.FromResult(request.ApplyTo(result));
    }

    protected async override Task OnParametersSetAsync()
    {
        await gridComponent.RefreshDataAsync();
        await base.OnParametersSetAsync();
    }

    private async Task HandleSelectedDataItemChanged(IListItem selection)
    {
        selectedItem = selection;
        await selectedItemChanged.InvokeAsync(selectedItem);
    }


    private async Task NewItemClicked()
    {
        await EventNewItem.InvokeAsync();
    }
}