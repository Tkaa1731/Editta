@inject IJSRuntime js
<HxListLayout Title="Culture infos" TFilterModel="FilterModelDto">
    <CommandsTemplate>
        <HxButton Text="New item" Color="ThemeColor.Primary" Icon="BootstrapIcon.PlusLg" OnClick="NewItemClicked" />
    </CommandsTemplate>
    <DataTemplate>
        <HxGrid @ref="gridComponent" ContentNavigationMode="GridContentNavigationMode.Pagination" Responsive="true" TItem="IListItem" PageSize="10" DataProvider="LoadDataItems" SelectedDataItem="currentItem" SelectedDataItemChanged="HandleSelectedDataItemChanged">
            <Columns>
                <HxGridColumn HeaderText="Id" ItemTextSelector="@(item => item.Id.ToString())" SortKeySelector="@(item => item.Id)" IsDefaultSortColumn="true" />
                <HxGridColumn HeaderText="Name" ItemTextSelector="@(item => item.Name)" SortKeySelector="@(item => item.Name)" />
                <HxGridColumn HeaderText="Description" ItemTextSelector="@(item => item.Description)" SortKeySelector="@(item => item.Description)" />
                <HxGridColumn HeaderText="Cretiondate" ItemTextSelector="@(item => item.CreationDate.ToString())" SortKeySelector="@(item => item.CreationDate)" />
                <HxContextMenuGridColumn Context="item">
@*                     <HxContextMenu>
                        <HxContextMenuItem Text="Delete" OnClick="async () => await DeleteItemClicked(item)" ConfirmationQuestion="@($"Are you sure you want to delete {item.Name}?")" />
                    </HxContextMenu> *@
					<a onclick="async ()=> await DeleteItemClicked(item) " style="color:red;"><HxIcon Icon="@BootstrapIcon.Trash" /></a>
				</HxContextMenuGridColumn>
            </Columns>
        </HxGrid>
    </DataTemplate>
    <DetailTemplate>
        Edit: @currentItem?.Id
    </DetailTemplate>
</HxListLayout>

@code {
    [Parameter]
    public List<IListItem> ListItems { get; set; } = new List<IListItem>();
    private IListItem? currentItem;
    private HxGrid<IListItem>? gridComponent;

    protected async override Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        if(gridComponent is not null)
            await gridComponent.RefreshDataAsync();
    }
    private Task<GridDataProviderResult<IListItem>> LoadDataItems(GridDataProviderRequest<IListItem> request)
    {
        IEnumerable<IListItem> result = ListItems;
        return Task.FromResult(request.ApplyTo(result));
    }

    private async Task DeleteItemClicked(IListItem editableCultureInfo)
    {
        ListItems.Remove(editableCultureInfo);
        if (gridComponent is not null)
            await gridComponent.RefreshDataAsync();
    }

    private Task HandleSelectedDataItemChanged(IListItem selection)
    {
        currentItem = selection;
        // await dataItemEditComponent.ShowAsync();
        return Task.CompletedTask;
    }

    private Task NewItemClicked()// async
    {
        //currentItem = new();
        // await dataItemEditComponent.ShowAsync();
        return Task.CompletedTask;
    }

    public record FilterModelDto { }

}