@inject IJSRuntime js
<HxListLayout TFilterModel="FilterModelDto">
        <TitleTemplate>
            List of items <HxBadge Color="ThemeColor.Light" TextColor="ThemeColor.Dark" CssClass="ms-1">@ListItems?.Count</HxBadge>
        </TitleTemplate>
        <SearchTemplate>
        <HxInputText Placeholder="Search" Type="InputType.Search" @bind-Value="SearchText" Enabled="ListItems is not null" />
        </SearchTemplate>
        <CommandsTemplate>
            <HxButton Text="New item" Color="ThemeColor.Primary" Icon="BootstrapIcon.PlusLg" OnClick="NewItemClicked" Enabled="ListItems is not null" />
        </CommandsTemplate>
    
    <DataTemplate>
        <HxGrid @ref="gridComponent" ContentNavigationMode="GridContentNavigationMode.Pagination" Responsive="true" TItem="IListItem" PageSize="15" DataProvider="LoadDataItems" SelectedDataItem="currentItem" SelectedDataItemChanged="HandleSelectedDataItemChanged">
            <Columns>
                <HxGridColumn HeaderText="Id" ItemTextSelector="@(item => item.Id.ToString())" SortKeySelector="@(item => item.Id)" IsDefaultSortColumn="true" />
                <HxGridColumn HeaderText="Name" ItemTextSelector="@(item => item.Name)" SortKeySelector="@(item => item.Name)" />
                <HxGridColumn HeaderText="Description" ItemTextSelector="@(item => item.Description)" SortKeySelector="@(item => item.Description)" />
                <HxGridColumn HeaderText="Cretiondate" ItemTextSelector="@(item => item.CreationDate.ToString())" SortKeySelector="@(item => item.CreationDate)" />
                <HxContextMenuGridColumn Context="item">
					<HxButton Icon="@BootstrapIcon.Trash" style="color:red; padding: 0px;" Color="ThemeColor.Link" OnClick="async ()=> await DeleteItemClicked(item)" />
				</HxContextMenuGridColumn>
            </Columns>
        </HxGrid>
    </DataTemplate>
</HxListLayout>

@code {
    [Parameter]
    [EditorRequired]
    public List<IListItem>? ListItems 
    {
        get
        {
            return listItems;
        }
        set
        {
            listItems = value;
            SearchText = "";
        } 
    }
    private List<IListItem>? listItems { get; set; }
    [Parameter]
    public IListItem? currentItem { get; set; }
    private HxGrid<IListItem>? gridComponent;
    [Parameter]
    public EventCallback<IListItem?> selectedItemChanged { get; set; }
    [Parameter]
    public EventCallback EventNewItem{ get; set; }

    private string SearchText
    {
        get
        {
            return searchText;
        }
        set
        {
            searchText = value;
            if(gridComponent is not null)
                gridComponent.RefreshDataAsync();
        }
    }
    private string searchText = string.Empty;
    private Task<GridDataProviderResult<IListItem>> LoadDataItems(GridDataProviderRequest<IListItem> request)
    {
        IEnumerable<IListItem>? result = ListItems?.Where(c => c.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase)).ToList();

        return Task.FromResult(request.ApplyTo(result));
    }

    protected async override Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        if(gridComponent is not null)
            await gridComponent.RefreshDataAsync();
    }

    private async Task DeleteItemClicked(IListItem editableCultureInfo)
    {
        ListItems.Remove(editableCultureInfo);
        if (gridComponent is not null)
            await gridComponent.RefreshDataAsync();
    }

    private async Task HandleSelectedDataItemChanged(IListItem selection)
    {
        currentItem = selection;
        await selectedItemChanged.InvokeAsync(currentItem);
        // await dataItemEditComponent.ShowAsync();
    }

    private async Task NewItemClicked()// async
    {
        //currentItem = new();
        // await dataItemEditComponent.ShowAsync();
        await EventNewItem.InvokeAsync();
    }

    public record FilterModelDto { }

}