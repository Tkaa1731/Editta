@if(Source is not null)
{
	<div @onclick=OnClickHandler class="p-3 mb-2 record-container @color">
		<div class="row align-items-center">
			@switch (Source.Record.RecordType)
			{
				case ERecordType.Folder:
					<div class="col-2">
						<HxIcon Icon="BootstrapIcon.Folder"></HxIcon>
					</div>
					<div class="col">
						<span>@Source.Record.Name</span>
					</div>
					break;
				case ERecordType.Ware:
					<div class="col-2">
						<HxIcon Icon="BootstrapIcon.Cart"></HxIcon>
					</div>
					<div class="col">
						<span>@Source.Record.Name</span>
					</div>
					<div class="col-2" style="color:grey; text-align:right;">
						<span>@Source.Record.Stock</span>
					</div>
					break;
				case ERecordType.Activity:
					<div class="col-2">
						<HxIcon Icon="BootstrapIcon.CalendarEvent"></HxIcon>
					</div>
					<div class="col">
						<span>@Source.Record.Name</span>
					</div>
					break;
				case ERecordType.EmployeeTasks:
					<div class="col-2">
						<HxIcon Icon="BootstrapIcon.People"></HxIcon>
					</div>
					<div class="col">
						<span>@Source.Record.Name</span>
					</div>
					break;
			}
		</div>
	</div>
}

@code {
	[EditorRequired]
	[Parameter]
	public RecordTreeView? Source { get; set; }
	[EditorRequired]
	[Parameter]
	public EventCallback<RecordTreeView> OnClick { get; set; }

	private string color
	{
		get
		{
			string c = "";
			if (Source is null)
				return c;
			switch (Source.Record.RecordType)
			{
				case ERecordType.Folder:
					c = "orange"; 
					break;
				case ERecordType.Ware:
					c = "blue";
					break;
				case ERecordType.Activity:
					c = "purple";
					break;
				case ERecordType.EmployeeTasks:
					c = "green";
					break;
			}
			return c;
		}
	}

	private async Task OnClickHandler()
	{
		await OnClick.InvokeAsync(Source);
	}
}
