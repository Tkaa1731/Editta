@inject PobytneService _service

	<HxTabPanel InitialActiveTabId="tab_filter"> 
		<HxTab Title="Filtr" Id="tab_filter" ContentCssClass="p-3 border rounded-bottom border-top-0" TitleCssClass="text-secondary">
			<Content>
				@FilterTemplate
				<DateFilter @bind-Filter="Filter"/>
@* 				<div style="display:flex; justify-content:center;">
					<HxButton CssClass="w-50 my-3" Color="ThemeColor.Primary" OnClick="async()=>await OnFilterSubmit.InvokeAsync(Filter)">Potvrdit vyber</HxButton>
				</div> *@

				<div style="">
				<HxTreeView TItem="IDirectory"
							SelectedItemChanged="OnSelect"
							OnItemExpanded="OnExpanded"
							Items="@fileSystem"
							CssClass="border rounded p-2"
							ItemTitleSelector="@(p => p.Name)"
							ItemIconSelector="@(p => p.Icon)"
							ItemChildrenSelector="@(p => p.SubDirectories)" />
				</div>

				<div class="row my-3">
					<HxButton CssClass="col mx-3" Color="ThemeColor.Primary" OnClick="async()=>await OnFilterSubmit.InvokeAsync(Filter)">Potvrdit vyber</HxButton>
					<HxButton CssClass="col mx-3" Color="ThemeColor.Primary" OnClick="async()=>{await OnExcelTransmit.InvokeAsync();await Task.Delay(2000);}" Enabled="ExcelEnable">Export do excelu</HxButton>
				</div>
			</Content>
		</HxTab>
		<HxTab Title="Souhrny" Id="tab_group"  ContentCssClass="p-3 border rounded-bottom border-top-0"  TitleCssClass="text-secondary">
			<Content>
				@GroupByTemplate
				<div style="display:flex; justify-content:center;">
					<HxButton CssClass="w-50 my-3" Color="ThemeColor.Primary" OnClick="async()=>await OnGroupBySubmit.InvokeAsync()" Enabled="ExcelEnable">Zobrazit souhrny</HxButton>
				</div>
			</Content>
		</HxTab>
	</HxTabPanel>
@code {
	CardSettings customCardSettings => new CardSettings { HeaderCssClass = "bg-transparent" };
	[CascadingParameter]
	public ModuleWorkplace moduleWorkplace { get; set; } = new();

	[Parameter]
	public RenderFragment? FilterTemplate { get; set; }
	[Parameter]
    public RenderFragment? GroupByTemplate { get; set; }

	[Parameter]
	[EditorRequired]
	public required IFilterReport Filter { get; set; }
	[Parameter]
	[EditorRequired]
	public EventCallback<IFilterReport> OnFilterSubmit { get; set; }
	[Parameter]
	[EditorRequired]
	public EventCallback OnExcelTransmit { get; set; }	
	[Parameter]
	public EventCallback OnGroupBySubmit { get; set; }
	[Parameter]
	[EditorRequired]
	public bool ExcelEnable { get; set; }

	private IDirectory? selectedDirectory;
	private IListItem? selectedItem;
	private IListItem? formItem;
	private List<IListItem>? listOfItems;
	private List<RecordDir> fileSystem = [];
	protected override async Task OnInitializedAsync()
	{
		// var response =  await _service.GetAllAsync<CashRegister>($"moduleId={idModule}");
		// if(response is not null && response is List<CashRegister> l)
		// {
		// 	list = l;
		// 	await grid.RefreshDataAsync();
		// }
		//TODO: recordListView => komponenta
		fileSystem.Add(
			new RecordDir(
				_service,
				new Record
					{
						Name = "Evidence",
						Id = 0,
						ModuleId = moduleWorkplace.Id,
						RootId = 0,
						ParentId = 0,
						StructDepth = 0,
					}
			)
				{
					Icon = BootstrapIcon.Archive
				}
		);
		await fileSystem[0].OnSelect();
	}
	private async Task OnSelect(IDirectory e)
	{
		this.selectedDirectory = e;
		if (selectedDirectory is not null)
		{
			// Filter.RecordId = e.ItemsList.Re
			await selectedDirectory.OnSelect();
			listOfItems = selectedDirectory.ItemsList;
		}
	}
	private async Task OnExpanded(IDirectory e)
	{
		if (e is not null)
		{
			await e.OnExpanded();
			StateHasChanged();
		}

	}

}
