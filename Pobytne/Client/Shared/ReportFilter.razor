@inject PobytneService _service

	<HxTabPanel InitialActiveTabId="tab_filter" CssClass=""> 
		<HxTab Title="Filtr" Id="tab_filter" ContentCssClass="px-4 py-2 border rounded-bottom border-top-0" TitleCssClass="text-secondary">
			<Content>
				@FilterTemplate
				<DateFilter @bind-Filter="Filter"/>

				<HxChipList Chips="@recordChips" ShowResetButton="true" ResetButtonText="Reset" OnResetClick="()=>multiselectItems.Clear()"  />

				<div class="w-100 my-2" style="flex:1; overflow-y:hidden;">
				<HxTreeView TItem="IDirectory"
							SelectedItemChanged="OnSelect"
							OnItemExpanded="OnExpanded"
							Items="@fileSystem"
							CssClass="border rounded p-2 overflow-auto"
							ItemTitleSelector="@(p => p.Name)"
							ItemIconSelector="@(p => p.Icon)"
							ItemChildrenSelector="@(p => p.SubDirectories)">

					<ItemTemplate>
						@if (context.SubDirectories?.Any() ?? false)
						{
							<HxBadge CssClass="mx-2" TextColor="ThemeColor.Dark" Color="ThemeColor.Light">@context.SubDirectories.Count</HxBadge>
						}
						<div role="button" @onclick="()=>multiselectMode=true" class="btn-plus rounded-1 px-1"><HxIcon Icon="BootstrapIcon.PlusLg" /></div>
					</ItemTemplate>

				</HxTreeView>
				</div>

				<div class="w-100 py-1 d-flex">
						<HxButton CssClass="flex-fill me-2" Color="ThemeColor.Primary" OnClick="OnSubmitHandler">Potvrdit vyber</HxButton>
						<HxButton CssClass="flex-fill ms-2" Color="ThemeColor.Primary" OnClick="async()=>{await OnExcelTransmit.InvokeAsync();await Task.Delay(2000);}" Enabled="ExcelEnable">Export do excelu</HxButton>
				</div>
			</Content>
		</HxTab>
		<HxTab Title="Souhrny" Id="tab_group"  ContentCssClass="p-4 border rounded-bottom border-top-0"  TitleCssClass="text-secondary">
			<Content>
				@GroupByTemplate
				<div style="display:flex; justify-content:center;">
					<HxButton CssClass="w-50 my-3" Color="ThemeColor.Primary" OnClick="async()=>await OnGroupBySubmit.InvokeAsync()" Enabled="ExcelEnable">Zobrazit souhrny</HxButton>
				</div>
			</Content>
		</HxTab>
	</HxTabPanel>
	<style>
	.tab-content{
		overflow-y:hidden !important;
		/* flex:1; */
	}
	div.tab-pane.active{
		
		height: 100%;
		/* max-height: 100%; */
		/* overflow: hidden; */
		display: flex;
		flex-direction: column;

	}
	.btn-plus:hover{
		background: #dae5ff;
	}
	</style>
@code {
	[CascadingParameter]
	public ModuleWorkplace moduleWorkplace { get; set; } = new();

	[Parameter]
	public RenderFragment? FilterTemplate { get; set; }
	[Parameter]
	public RenderFragment? GroupByTemplate { get; set; }

	[Parameter]
	[EditorRequired]
	public required IFilterReport Filter { get; set; }
	[Parameter]
	[EditorRequired]
	public EventCallback<IFilterReport> OnFilterSubmit { get; set; }
	[Parameter]
	[EditorRequired]
	public EventCallback OnExcelTransmit { get; set; }	
	[Parameter]
	public EventCallback OnGroupBySubmit { get; set; }
	[Parameter]
	[EditorRequired]
	public bool ExcelEnable { get; set; }

	private HxChipList chipList = new();
	private ChipItem[] recordChips => multiselectItems.Select(i => new ChipItem(){ ChipTemplate = GetChipRenderFragment(i.Id,i.Name), Removable = true }).ToArray();

	private List<IDirectory> multiselectItems = [];
	private bool multiselectMode = false;
	private List<RecordDir> fileSystem = [];
	protected override async Task OnInitializedAsync()
	{
		fileSystem.Add(
			new RecordDir(
				_service,
				new Record
					{
						Name = "Evidence",
						Id = 0,
						ModuleId = moduleWorkplace.Id,
						RootId = 0,
						ParentId = 0,
						StructDepth = 0,
					}
			)
				{
					Icon = BootstrapIcon.Archive
				}
		);
		await fileSystem[0].OnSelect();
	}
	private void OnSelect(IDirectory e)
	{
		if(!multiselectItems.Contains(e))
		{
			if (!multiselectMode)
			{
				multiselectItems.Clear();
				// Filter.RecordId = e.ItemsList.Re
				//await selectedDirectory.OnSelect();
			}
			multiselectItems.Add(e);
		}
		multiselectMode = false;
	}
	private async Task OnExpanded(IDirectory e)
	{
		if (e is not null)
		{
			await e.OnExpanded();
			StateHasChanged();
		}

	}
	private async Task OnSubmitHandler()
	{
		Filter.RecordsId.Clear();
		Filter.RecordsId.AddRange(multiselectItems.Select(i=>i.Id));

		await OnFilterSubmit.InvokeAsync(Filter);
	}
	private static RenderFragment GetChipRenderFragment(int id, string value) => builder =>
	{
		builder.OpenElement(0, "span");
		builder.SetKey(id);
		builder.AddAttribute(1, "record-id", id);
		builder.AddAttribute(2, "class", "hx-chip-list-label");
		builder.AddContent(3, id);
		builder.AddContent(4, ": ");
		builder.CloseElement();
		builder.AddContent(5, value);
	};
	/// <summary>
	/// TODO: Chip remove
	/// List with endpoint records
	/// When submit then all subrecords to Filter
	/// </summary>
}
