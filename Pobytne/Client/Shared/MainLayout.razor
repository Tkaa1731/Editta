@inherits LayoutComponentBase
@inject AuthenticationService service
@inject NavigationManager navManager
@inject ILocalStorageService _storage

<div class="page">
    <AuthorizeView>
        <Authorized>
            <div class="sidebar w-auto dark shadow">
                <NavMenu OnLogout="Logout" />
            </div>

            <main>
                <HxMessenger Position="ToastContainerPosition.TopCenter" />
                <HxMessageBoxHost/>
                <TokenExpirationCounter/>

                <CascadingValue Value="moduleWorkspace">
                    <div class="p-4">
                        @Body 
                    </div>
                </CascadingValue>

            </main>
        
        </Authorized>
        <Authorizing>

        </Authorizing>
        <NotAuthorized>
            <main>
                <HxMessenger Position="ToastContainerPosition.TopCenter" />
                <CascadingValue Value="moduleWorkspace">
                        <LoginForm/>
                </CascadingValue>
            </main>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; } = default!;
    [CascadingParameter]
    private ModuleWorkplace moduleWorkspace { get; set; } = default!;

    private async Task Logout()
    {
        await service.Logout();
    }
    private void RefreshFailureHandler() {
        navManager.Refresh();
    }
    protected override async Task OnInitializedAsync()
    {
        AuthenticationService.OnTokenRefreshFailure = EventCallback.Factory.Create(this, RefreshFailureHandler);

        var authState = await authenticationState;
        if (authState.User.Identity is not null && authState.User.Identity.IsAuthenticated)
        {
            var user = await _storage.ReadEncryptedItem<UserAccount>(LocalStorageService.USER_SESSION);
            if (user is not null)
            {
                moduleWorkspace.UserId = user.User.Id;
                moduleWorkspace.UserName = user.User.UserName;
                moduleWorkspace.LicenseNumber = user.User.LicenseNumber;
                moduleWorkspace.LicenseName = user.User.LicenseName;
                moduleWorkspace.ModulesDic = user.User.AccessPermition.ToDictionary(p => p.ModuleId, p => p.ModuleName);
            }
        }
    }
}